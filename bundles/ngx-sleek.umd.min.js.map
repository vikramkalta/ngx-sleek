{"version":3,"file":"ngx-sleek.umd.min.js","sources":["../../tmp/grid/directive-service.ts","../../tmp/grid/row.ts","../../tmp/grid/cell.ts","../../tmp/grid/grid.ts","../../tmp/grid/grid.module.ts","../../tmp/grid/grid-methods.ts","../../tmp/grid/data-source.ts","../../tmp/sort/sort-directive.service.ts","../../tmp/sort/sort.ts","../../tmp/sort/sort-header.ts","../../tmp/sort/sort-module.ts","../../tmp/tree/node.ts","../../tmp/tree/outlet.ts","../../tmp/tree/tree-nest-outlet.ts","../../tmp/tree/node-directive.ts","../../tmp/tree/tree.ts","../../tmp/tree/tree-service.ts","../../tmp/tree/nested-node.ts","../../tmp/tree/control/base-tree-control.ts","../../tmp/tree/control/nested-tree-control.ts","../../tmp/tree/tree-nest-node.ts","../../tmp/tree/tree-module.ts","../../tmp/paginator/page-nav.ts","../../tmp/paginator/paginator.ts","../../tmp/paginator/paginator-module.ts","../../tmp/grid-filter/filter.ts","../../tmp/grid-popup/grid-popup.ts","../../tmp/grid-popup/grid-popup.module.ts","../../tmp/grid-filter/grid-filter-ref.ts","../../tmp/grid-filter/grid-filter-tokens.ts","../../tmp/grid-filter/grid-filter-service.ts","../../tmp/grid-filter/grid-filter.ts","../../tmp/grid-filter/grid-module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class DirectiveService {\n    private totalColumns = new BehaviorSubject<number>(0);\n    totalColumnsAsObservable: Observable<number> = this.totalColumns.asObservable();\n    setTotalColumns(columns: any[]) {\n        this.totalColumns.next(columns.length);\n    }\n}\n","import {\n    IterableDiffer,\n    IterableDiffers,\n    TemplateRef,\n    SimpleChanges,\n    OnChanges,\n    IterableChanges,\n    ViewContainerRef,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    Component,\n    Directive,\n    Input,\n    Renderer2,\n    ElementRef,\n    OnInit\n} from '@angular/core';\nimport { SlkColumnDefDirective, SlkCellDef } from './cell';\nimport { DirectiveService } from './directive-service';\n\n/**\n * The row template that can be used by the slk-table.\n */\nexport const SLK_ROW_TEMPLATE = `<ng-container slkCellOutlet></ng-container>`;\n\n/**\n * Base class for the SlkHeaderRowDef and SlkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nexport abstract class BaseRowDef implements OnChanges {\n    /** The columns to be displayed on this row. */\n    columns: Iterable<string>;\n\n    /** Differ used to check if any changes were made to the columns. */\n    protected _columnsDiffer: IterableDiffer<any>;\n\n    constructor(\n        public template: TemplateRef<any>,\n        protected _differs: IterableDiffers\n    ) { }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        // console.log('this.columns from row', this.columns);\n        // create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            // console.log('columns from row', columns);\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or ull\n     * if there is no difference.\n     */\n    getColumnsDiff(): IterableChanges<any> | null {\n        return this._columnsDiffer.diff(this.columns);\n    }\n\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column: SlkColumnDefDirective): TemplateRef<any> {\n        // console.log('column from row', column, this instanceof SlkHeaderRowDefDirective);\n        return extractCellTemp(this, column);\n    }\n\n}\n\nexport class SlkHeaderRowDefBase extends BaseRowDef { }\n// export const _SlkHeaderRowDefBase = mixinHasStickyInput(SlkHeaderRowDefBase);\n\n/**\n * Header row definition for the slk table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n    selector: '[slkHeaderRowDef]',\n})\nexport class SlkHeaderRowDefDirective extends SlkHeaderRowDefBase implements OnChanges, OnInit {\n    @Input('slkHeaderRowDef') slkHeaderRowDef: any;\n    @Input() columns: any;\n\n    constructor(\n        template: TemplateRef<any>,\n        _differs: IterableDiffers,\n        private directiveService: DirectiveService\n    ) {\n        super(template, _differs);\n        // console.log('appHeaderRowDef', this.appHeaderRowDef);\n    }\n\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n        this.columns = this.slkHeaderRowDef;\n    }\n\n    ngOnInit() {\n        this.directiveService.setTotalColumns(this.columns);\n    }\n}\n\nexport class SlkFooterRowDefBase extends BaseRowDef { }\n\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n    selector: '[slkFooterRowDef]'\n})\nexport class SlkFooterRowDefDirective extends BaseRowDef implements OnChanges {\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n        super(template, _differs);\n    }\n\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n    }\n}\n\nfunction extractCellTemp(that: any, column: any): TemplateRef<any> {\n    if (that instanceof SlkHeaderRowDefDirective) {\n        return column.headerCell.template;\n    } if (that instanceof SlkFooterRowDefDirective) {\n        return column.footerCell.template;\n    } else {\n        return column.cell.template;\n    }\n}\n\n/**\n * Data row definition for the slk table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n@Directive({\n    selector: '[slkRowDef]'\n})\nexport class SlkRowDefDirective<T> extends BaseRowDef implements OnChanges {\n    @Input('slkRowDefColumns') slkRowDefColumns: any;\n    @Input() columns: any;\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or undedined to default.\n     */\n    when: (index: number, rowDatA: T) => boolean;\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n        super(template, _differs);\n        // console.log('appRowDefColumns', this.appRowDef);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n        this.columns = this.slkRowDefColumns;\n        // console.log('appRowDefColumns1', this.appRowDef);\n    }\n}\n\n/** Context provided to the row cells */\nexport interface SlkCellOutletRowContext<T> {\n    /** Data for the row that this cell is located within. */\n    $implicit?: T;\n\n    /** Index of the data object in the provided data array. */\n    index?: number;\n\n    /** Length of the number of total rows. */\n    count?: number;\n\n    /** True if this cell is contained in the first row. */\n    first?: boolean;\n\n    /** True if this cell is contained in the last row. */\n    last?: boolean;\n\n    /** true if this is containeed in a row with even-numbered index. */\n    even?: boolean;\n\n    /** True if this cell is contained in a row with an odd-numbered index. */\n    odd?: boolean;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n */\n@Directive({ selector: '[slkCellOutlet]' })\nexport class SlkCellOutletDirective {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet: SlkCellOutletDirective | null = null;\n    /** The ordered list of cells to render within this outlet's view container */\n    cells: SlkCellDef[];\n\n    /** the data context to be provided to each cell. */\n    context: any;\n\n    constructor(public _viewContainer: ViewContainerRef) {\n        // console.log('this this', this);\n        SlkCellOutletDirective.mostRecentCellOutlet = this;\n    }\n}\n\n/** Header template container that container the cell outlet. */\n@Component({\n    selector: 'slk-header-row, tr[slk-header-row]',\n    template: SLK_ROW_TEMPLATE,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `]\n})\nexport class SlkHeaderRowComponent {\n    constructor(private renderer: Renderer2, elementRef: ElementRef) {\n        this.renderer.addClass(elementRef.nativeElement, 'header-row');\n    }\n}\n\n/** Footer template container that contains the cell outlet. */\n@Component({\n    selector: 'slk-footer-row, tr[slk-footer-row]',\n    template: SLK_ROW_TEMPLATE,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `]\n})\nexport class SlkFooterRowComponent { }\n\n/** Data row template container that contains cell outlet. */\n@Component({\n    selector: 'slk-row, tr[slk-row]',\n    template: SLK_ROW_TEMPLATE,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `]\n})\nexport class SlkRowComponent {\n    constructor(private renderer: Renderer2, elementRef: ElementRef) {\n        this.renderer.addClass(elementRef.nativeElement, 'header-row');\n    }\n}\n\n","import {\n    TemplateRef,\n    Directive,\n    Input,\n    ContentChild,\n    ElementRef,\n    OnInit,\n    Renderer2,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DirectiveService } from './directive-service';\nimport { takeUntil } from 'rxjs/operators';\n\n/** Base interface for a cell definition. */\nexport interface SlkCellDef {\n    template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a Slk Table.\n */\n@Directive({ selector: '[slkCellDef]' })\nexport class SlkCellDefDirective implements SlkCellDef {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * Header cell defintion for a Slk table.\n */\n@Directive({ selector: '[slkHeaderCellDef]' })\nexport class SlkHeaderCellDefDirective implements SlkCellDef {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * Footer cell defintion for a Slk table.\n */\n@Directive({ selector: '[slkFooterCellDef]' })\nexport class SlkFooterCellDefDirective implements SlkCellDef {\n    constructor(public template: TemplateRef<any>) { }\n}\n\nexport class SlkColumnDefBase { }\n\n/**\n * Column definition for the Slk table.\n */\n@Directive({\n    selector: '[slkColumnDef]'\n})\nexport class SlkColumnDefDirective extends SlkColumnDefBase {\n    /** Unique name for this column. */\n    @Input('slkColumnDef')\n    get name(): string { return this._name; }\n    set name(name: string) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        if (!name) { return; }\n\n        this._name = name;\n        this.cssClassFriendlyName = name;\n    }\n    _name: string;\n\n    @ContentChild(SlkCellDefDirective) cell: SlkCellDef;\n    @ContentChild(SlkHeaderCellDefDirective) headerCell: SlkHeaderCellDefDirective;\n    @ContentChild(SlkFooterCellDefDirective) footerCell: SlkFooterCellDefDirective;\n\n    /**\n     * Transformed version of the column name that can be used a part of css classname.\n     */\n    cssClassFriendlyName: string;\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseSlkCell {\n    constructor(columnDef: SlkColumnDefDirective, elementRef: ElementRef) {\n        const columnClassName = `slk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n\n/** Header cell template container. */\n@Directive({\n    selector: 'slkHeaderCell, th[slkHeaderCell]'\n})\nexport class SlkHeaderCellDirective extends BaseSlkCell implements OnInit {\n    destroy = new Subject<boolean>();\n    constructor(\n        columnDef: SlkColumnDefDirective,\n        private elementRef: ElementRef,\n        private directiveService: DirectiveService,\n        private renderer: Renderer2\n    ) {\n        super(columnDef, elementRef);\n    }\n\n    ngOnInit() {\n        this.directiveService.totalColumnsAsObservable\n            .pipe(takeUntil(this.destroy))\n            .subscribe((cols: number) => {\n                const totalColumns = 100 / cols;\n                this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${totalColumns}%`);\n                this.destroy.next(true);\n            });\n\n    }\n}\n\n/** Footer cell template container */\n@Directive({\n    selector: 'slkFooterCell, th[slkFooterCell]'\n})\nexport class SlkFooterCellDirective extends BaseSlkCell {\n    constructor(columnDef: SlkColumnDefDirective, elementRef: ElementRef) {\n        super(columnDef, elementRef);\n    }\n}\n\n/** Cell template container */\n@Directive({\n    selector: 'slkCell, td[slkCell]'\n})\nexport class SlkCellDirective extends BaseSlkCell implements OnInit {\n    destroy = new Subject<boolean>();\n    constructor(\n        columnDef: SlkColumnDefDirective,\n        private elementRef: ElementRef,\n        private directiveService: DirectiveService,\n        private renderer: Renderer2\n    ) {\n        super(columnDef, elementRef);\n    }\n\n    ngOnInit() {\n        this.directiveService.totalColumnsAsObservable\n            .pipe(takeUntil(this.destroy))\n            .subscribe((cols: number) => {\n                const totalColumns = 100 / cols;\n                this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${totalColumns}%`);\n                this.destroy.next(true);\n            });\n\n    }\n}\n","import {\n    ViewContainerRef,\n    Directive,\n    ElementRef,\n    EmbeddedViewRef,\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    AfterContentChecked,\n    OnDestroy,\n    IterableDiffer,\n    Input,\n    ContentChildren,\n    IterableDiffers,\n    ChangeDetectorRef,\n    OnInit,\n    ViewChild,\n    IterableChangeRecord,\n    TemplateRef,\n    QueryList,\n    TrackByFunction,\n    isDevMode,\n    HostBinding,\n    Renderer2,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\n\nimport { Subject, Subscription, Observable, BehaviorSubject, of as observableOf } from 'rxjs';\n\n// import {\n//     getTableUnknownDataSourceError,\n//     getTableUnknownColumnError,\n//     getTableMultipleDefaultRowDefsError,\n//     getTableDuplicateColumnNameError\n// } from '@app/shared/grid/table-errors';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n    SlkCellOutletRowContext,\n    SlkRowDefDirective,\n    SlkHeaderRowDefDirective,\n    SlkFooterRowDefDirective,\n    BaseRowDef,\n    SlkCellOutletDirective\n} from './row';\nimport {\n    SlkColumnDefDirective\n} from './cell';\n\n/** Interface used to provide an outlet for rows to be inserted into. */\nexport interface RowOutlet {\n    viewContainer: ViewContainerRef;\n}\n\n/** Provides a handle for the table to grab the view container's ng-container to insert data rows. */\n@Directive({\n    selector: '[slkRowOutlet]'\n})\nexport class DataRowOutletDirective implements RowOutlet {\n    constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/** Provides a handle for the table to grab the view container's ng-container to insert the header */\n@Directive({\n    selector: '[slkHeaderRowOutlet]'\n})\nexport class HeaderRowOutletDirective implements RowOutlet {\n    constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/** Provides a handle for the table to grab view container's ng-container to insert the footer. */\n@Directive({\n    selector: '[slkFooterRowOutlet]'\n})\nexport class FooterRowOutletDirective implements RowOutlet {\n    constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/**\n * The table template that can be used by slk-table\n */\nexport const SLK_TABLE_TEMPLATE = `\n    <ng-container slkHeaderRowOutlet></ng-container>\n    <ng-container slkRowOutlet></ng-container>\n    <ng-container slkFooterRowOutlet></ng-container>\n`;\n\n/**\n * Class used to conveniently type the embedded view ref for rows with a context\n */\nabstract class RowViewRef<T> extends EmbeddedViewRef<SlkCellOutletRowContext<T>> { }\n\n/**\n * Set of properties that represents the identity of a single rendered row.\n */\nexport interface RenderRow<T> {\n    data: T;\n    dataIndex: number;\n    rowDef: SlkRowDefDirective<T>;\n}\n\n/**\n * A data table that can render a header row, data rows and a footer row.\n */\n@Component({\n    selector: 'slk-table, table[slk-table]',\n    exportAs: 'slkTable',\n    template: SLK_TABLE_TEMPLATE,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkTableComponent<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n    /** Latest data provided by the data source. */\n    protected _data: T[];\n    public copyOfData: T[];\n\n    /** Subject that emits when the component has been destoryed. */\n    private _onDestroy = new Subject<void>();\n\n    /** List of the rendered rows as identified by their `RenderRow` object. */\n    private _renderRows: RenderRow<T>[];\n\n    /** Subscription that listens for the data provided by the data source. */\n    private _renderChangeSubscription: Subscription | null;\n\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    private _columnDefsByName = new Map<string, SlkColumnDefDirective>();\n\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     */\n    private _rowDefs: SlkRowDefDirective<T>[];\n\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using 'ContentChildren' as well as any custom row defintions added to\n     * '_customHeaderRowDefs'.\n     */\n    private _headerRowDefs: SlkHeaderRowDefDirective[];\n\n    /**\n     * Set of all footer row definitions that can be used by this table. Populated by the rows\n     * gathered by using 'ContentChildren' as well as any custom row defintions added to\n     * '_customFooterRowDefs'.\n     */\n    private _footerRowDefs: SlkFooterRowDefDirective[];\n\n    /** _Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<RenderRow<T>>;\n\n    /** Stores the row definition that does not have a when predicate. */\n    private _defaultRowDef: SlkRowDefDirective<T> | null;\n\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *it's* content child.\n     */\n    private _customColumnDefs = new Set<SlkColumnDefDirective>();\n\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *it's* content child.\n     */\n    private _customRowDefs = new Set<SlkRowDefDirective<T>>();\n\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *it's* content child.\n     */\n    private _customHeaderRowDefs = new Set<SlkHeaderRowDefDirective>();\n\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *it's* content child.\n     */\n    private _customFooterRowDefs = new Set<SlkFooterRowDefDirective>();\n\n    // TODO:- Later connect it with dataSource. After filter is implmented.\n    /** Page Index. */\n    pageIndex = 1;\n    /** Emits an event when scroll has reached the bottom. */\n    @Output('scrollToBottom') scrollToBottom: EventEmitter<any> = new EventEmitter<any>();\n    /** Gets the total number of rows that has to be displayed. */\n    @Input()\n    get length(): number { return this._length; }\n    set length(value: number) {\n        this._length = value;\n    }\n    private _length: number;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input()\n    get trackBy(): TrackByFunction<T> { return this._trackByFn; }\n    set trackBy(fn: TrackByFunction<T>) {\n        if (isDevMode() &&\n            fn != null && typeof fn !== 'function' &&\n            <any>console && <any>console.warn) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    private _trackByFn: TrackByFunction<T>;\n\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    private _dataSource: DataSource<T> | Observable<T[]> | T[] | T[];\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as heuristic of what data should be provided.\n     */\n    viewChange: BehaviorSubject<{ start: number, end: number }> =\n        new BehaviorSubject<{ start: number, end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    // Outlets in the table's template where the header, data rows, and footer will be inserted.\n    @ViewChild(DataRowOutletDirective) _rowOutlet: DataRowOutletDirective;\n    @ViewChild(HeaderRowOutletDirective) _headerRowOutlet: HeaderRowOutletDirective;\n    @ViewChild(FooterRowOutletDirective) _footerRowOutlet: FooterRowOutletDirective;\n\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     */\n    @ContentChildren(SlkColumnDefDirective) _contentColumnDefs: QueryList<SlkColumnDefDirective>;\n\n    /** Set of data row definitions that were provided to the table as content children. */\n    @ContentChildren(SlkRowDefDirective) _contentRowDefs: QueryList<SlkRowDefDirective<T>>;\n\n    /** Set of header row definitions that were provided to the table as content children. */\n    @ContentChildren(SlkHeaderRowDefDirective) _contentHeaderRowDefs: QueryList<SlkHeaderRowDefDirective>;\n\n    /** Set of footer row definitions that were provided to the table as content children. */\n    @ContentChildren(SlkFooterRowDefDirective) _contentFooterRowDefs: QueryList<SlkFooterRowDefDirective>;\n\n    /** Set class for the host element */\n    @HostBinding('class') class = 'table-slk-grid';\n\n    constructor(\n        protected readonly _differs: IterableDiffers,\n        protected readonly _changeDetectorRef: ChangeDetectorRef,\n        protected readonly _elementRef: ElementRef,\n        private renderer: Renderer2\n    ) {\n        // this.renderer.setStyle(_elementRef.nativeElement, 'overflow', 'auto');\n    }\n\n    ngOnInit() {\n        if (this._elementRef.nativeElement.nodeName === 'TABLE') {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\n            // console.log('_i', _i, dataRow);\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        // console.log('data differ', this._dataDiffer);\n    }\n\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n\n        // add a class to give styling to the host element\n        this.renderer.addClass(this._elementRef.nativeElement, 'slk-grid');\n    }\n\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n\n        // this._cachedRenderRowsMap.clear();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n    }\n\n    /**\n     * Render rows based on the table's latest set of data which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary changes\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        // console.log('renderRows', this._renderRows);\n        // console.log('this._dataDiffer', this._dataDiffer);\n        const changes = this._dataDiffer.diff(this._renderRows);\n        // console.log('changes', changes);\n        if (!changes) { return; }\n\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation(\n            (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number, currentIndex: number) => {\n                // console.log('record', record, prevIndex, currentIndex);\n                if (record.previousIndex === null) {\n                    this._insertRow(record.item, currentIndex);\n                } else if (currentIndex === null) {\n                    viewContainer.remove(prevIndex);\n                } else {\n                    const view = <RowViewRef<T>>viewContainer.get(prevIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n                if (currentIndex === this._data.length - 1) {\n                    this._addScrollEvent();\n                }\n            });\n    }\n\n    private _getAllRenderRows(): RenderRow<T>[] {\n        const renderRows: RenderRow<T>[] = [];\n        // console.log('this_Data', this._data);\n\n        // for each data object, get the list of rows that should be rendered, represented by the\n        // respective 'RenderRow' object which is the pair of data and slkrowDef\n        for (let i = 0; i < this._data.length; i++) {\n            // console.log('this._data i', i);\n            const data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i);\n            // console.log('render rows for data', renderRowsForData);\n\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                const renderRow = renderRowsForData[j];\n                // console.log('j', j, renderRow);\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n\n    /**\n     * Gets a list of 'RenderRow<T>' for the provided data object and any 'CdkRowDef' objects that\n     * should be rendered for this data. Reuses the cached RenderRow objecst if they match the same\n     * (T, SlkRowDef) pair.\n     */\n    private _getRenderRowsForData(\n        data: T, dataIndex: number\n    ): RenderRow<T>[] {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n\n        return rowDefs.map((rowDef: any) => {\n            return { data, rowDef, dataIndex };\n        });\n    }\n\n    /** Update the map containing the content's column definitions. */\n    private _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n\n        columnDefs.forEach(columnDef => {\n            // if (this._columnDefsByName.has(columnDef.name)) {\n            //     throw getTableDuplicateColumnNameError(columnDef.name);\n            // }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n\n    /** Update the list of all available row definitions that can be used. */\n    private _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs =\n            mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        // if (defaultRowDefs.length > 1) {\n        //     throw getTableMultipleDefaultRowDefsError();\n        // }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    private _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\n\n        // console.log('this.-rowDefs', this._rowDefs);\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        this._data = [];\n\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n\n        this._dataSource = dataSource;\n    }\n\n    /** Sets up a subscription for the data provided by the data source. */\n    private _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) { return; }\n\n        let dataStream: Observable<T[]> | undefined;\n        // Check if the datasource is a DataSource object by observing if it has a connect function.\n        // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n        // checked as an instanceof DataSource<T> since the table should allow for data sources\n        // that did not explicitly extend DataSource<T>.\n        if ((this.dataSource as DataSource<T>).connect instanceof Function) {\n            dataStream = (this.dataSource as DataSource<T>).connect(this);\n            // console.log('dataSteam', dataStream);\n        } else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n            // console.log('dataStream1', dataStream);\n        } else if (Array.isArray(this.dataSource)) {\n            dataStream = observableOf(this.dataSource);\n            // console.log('dataStream2', dataStream);\n        }\n\n        // if (dataStream === undefined) {\n        //     throw getTableUnknownDataSourceError();\n        // }\n\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((data: any) => {\n                this._data = data || [];\n                this.copyOfData = this._data.slice();\n                this.renderRows();\n            });\n    }\n\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    private _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    private _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    }\n\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row defintion, it is returned. otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none reutrn true, retun thedefault row\n     * definition\n     */\n    _getRowDefs(data: T, dataIndex: number): SlkRowDefDirective<T>[] {\n        if (this._rowDefs.length === 1) { return [this._rowDefs[0]]; }\n\n        const rowDefs: SlkRowDefDirective<T>[] = [];\n\n        const rowDef =\n            this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n        if (rowDef) {\n            rowDefs.push(rowDef);\n        }\n\n        return rowDefs;\n    }\n\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     */\n    private _insertRow(renderRow: RenderRow<T>, renderIndex: number) {\n        // console.log('render row', renderRow);\n        const rowDef = renderRow.rowDef;\n        const context: SlkCellOutletRowContext<T> = { $implicit: renderRow.data };\n        // console.log('context', context);\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet\n     */\n    private _renderRow(\n        outlet: RowOutlet, rowDef: BaseRowDef, index: number, context: SlkCellOutletRowContext<T> = {}\n    ) {\n        // console.log('outlet', outlet, rowDef, index, context);\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n        for (let _a = 0, _b = this._getCellTemplates(rowDef); _a < _b.length; _a++) {\n            const cellTemplate = _b[_a];\n            // console.log('cell template', SlkCellOutletDirective.mostRecentCellOutlet, cellTemplate);\n            if (SlkCellOutletDirective.mostRecentCellOutlet) {\n                // console.log('create embedded view');\n                SlkCellOutletDirective.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Gets the column definitions for the provided row def. */\n    private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\n        // console.log('row def', rowDef);\n        if (!rowDef || !rowDef.columns) { return []; }\n        // console.log('!rowdef pass', rowDef.columns);\n        return Array.from(rowDef.columns, columnId => {\n            // console.log('columnId', columnId, this._columnDefsByName);\n            const column = this._columnDefsByName.get(columnId);\n            // console.log('column', column);\n\n            // if (!column) {\n            //     throw getTableUnknownColumnError(columnId);\n            // }\n\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n\n    /**\n     * Adds native table sections (e.g tbody) and moves the router outlets into them.\n     */\n    _applyNativeTableSections() {\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet }\n        ];\n        for (let _a = 0, sections_1 = sections; _a < sections_1.length; _a++) {\n            const section = sections_1[_a];\n            const element = document.createElement(section.tag);\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            this._elementRef.nativeElement.appendChild(element);\n        }\n    }\n    /**\n     * TODO: Move this to a new scroll module later.\n     * Adds a scroll event on the grid.\n     */\n    _addScrollEvent(): void {\n        const tbody = document.getElementsByTagName('tbody');\n        tbody[0].addEventListener('scroll', (event: UIEvent) => {\n            // Avoids scroll event to get fired twice.\n            event.stopImmediatePropagation();\n            this.onScroll(event);\n        });\n    }\n    // Later change the logic.\n    onScroll(event: any): void {\n        const tbodyViewHeight = event.target.offsetHeight;\n        const tbodyScrollHeight = event.target.scrollHeight;\n        const scrollLocation = event.target.scrollTop;\n        // If the user has scrolled to the bottom, send signal via output binding.\n        const limit = tbodyScrollHeight - tbodyViewHeight;\n\n        // get total pages.\n        const totalPages = this.length / this._data.length;\n\n        if (scrollLocation === limit) {\n            this.pageIndex++;\n            if (totalPages >= this.pageIndex) {\n                this.scrollToBottom.emit({\n                    pageIndex: this.pageIndex,\n                    totalRows: this._length\n                });\n            } else {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which should be rendered adding/removing row definitions\n     */\n    private _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n}\n\n/** Utility function that gets a merged list of the entries in a QueryList and values of a Set. */\nfunction mergeQueryListAndSet<T>(queryList: QueryList<T>, set: Set<T>): T[] {\n    // console.log('query list', queryList, set);\n    return queryList.toArray().concat(Array.from(set));\n}\n\n\n","import {\n    SlkTableComponent,\n    DataRowOutletDirective,\n    HeaderRowOutletDirective,\n    FooterRowOutletDirective\n} from './grid';\nimport {\n    SlkRowDefDirective,\n    SlkCellOutletDirective,\n    SlkRowComponent,\n    SlkHeaderRowComponent,\n    SlkHeaderRowDefDirective,\n    SlkFooterRowComponent,\n    SlkFooterRowDefDirective\n} from './row';\nimport {\n    SlkCellDefDirective,\n    SlkHeaderCellDefDirective,\n    SlkFooterCellDefDirective,\n    SlkColumnDefDirective,\n    SlkCellDirective,\n    SlkHeaderCellDirective,\n    SlkFooterCellDirective\n} from './cell';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DirectiveService } from './directive-service';\n\nconst EXPORTED_DECLARATIONS = [\n    SlkTableComponent,\n    SlkRowDefDirective,\n    SlkCellDefDirective,\n    SlkCellOutletDirective,\n    SlkHeaderCellDefDirective,\n    SlkFooterCellDefDirective,\n    SlkColumnDefDirective,\n    SlkCellDirective,\n    SlkRowComponent,\n    SlkHeaderCellDirective,\n    SlkFooterCellDirective,\n    SlkHeaderRowComponent,\n    SlkHeaderRowDefDirective,\n    SlkFooterRowComponent,\n    SlkFooterRowDefDirective,\n    DataRowOutletDirective,\n    HeaderRowOutletDirective,\n    FooterRowOutletDirective,\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [DirectiveService]\n})\nexport class SlkGridModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SlkGridModule\n        }\n    }\n}\n","export let _finalDataSet: any[] = [];\n\n// Swap method\nexport function swap(dataSet: any[], left: number, right: number) {\n    // create a temporary reference to swap the object\n    const temp = dataSet[left];\n    dataSet[left] = dataSet[right];\n    dataSet[right] = temp;\n}\n\n// quick sort\nexport function quickSort(dataSet: any[], column: string, low: number, high: number) {\n    let j: number;\n    if (high > low) {\n        j = partition(dataSet, column, low, high);\n        if (low < j - 1) {\n            quickSort(dataSet, column, low, j - 1);\n        }\n        if (j < high) {\n            quickSort(dataSet, column, j, high);\n        }\n        _finalDataSet = dataSet;\n    }\n}\n\n// partition function\nexport function partition(dataSet: any[], column: string, low: number, high: number): number {\n    const pivot = dataSet[Math.floor((low + high) / 2)][column].split('')[0].toLowerCase();\n\n    let i: number = low, j: number = high;\n\n    while (i <= j) {\n        while (dataSet[i][column].split('')[0].toLowerCase() < pivot) {\n            i++;\n        }\n        while (dataSet[j][column].split('')[0].toLowerCase() > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            swap(dataSet, i, j);\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n\n// fast sort for ascending if already data set in descending order\nexport function shellSortAsc(dataSet: any[], column: string) {\n    const length: number = dataSet.length;\n    // calculating the gap\n    let gap: number = Math.floor(length / 2);\n\n    // loop through the array till the gap is less than 0\n    while (gap > 0) {\n        // decoy\n        let j = 0;\n\n        // start the looping at gap and end at length\n        for (let i = gap; i < length; i++) {\n            // store current dataSet value in temp\n            const temp = dataSet[i];\n\n            // j = i;\n            let currentStr;\n            if (i - gap >= 0) {\n                currentStr = dataSet[i - gap][column].split('')[0].toLowerCase();\n            } else {\n                // in comparison will always return false hence skip the loop\n                currentStr = 0;\n            }\n            for (j = i; j >= gap && currentStr > temp[column].split('')[0].toLowerCase(); j -= gap) {\n                dataSet[j] = dataSet[j - gap];\n            }\n\n            // if condition is not met then no change in array\n            dataSet[j] = temp;\n        }\n\n        gap = Math.floor(gap / 2);\n\n    }\n    // console.log('dataset', dataSet);\n    return dataSet;\n}\n\nexport function shellSortDesc(dataSet: any[], column: string) {\n    let i, temp, flag = 1;\n    const numLength = dataSet.length;\n    let d = numLength;\n    while (flag || (d > 1)) { // boolean flag (true when not equal to 0)\n        flag = 0;           // reset flag to 0 to check for future swaps\n        d = Math.floor((d + 1) / 2);\n        for (i = 0; i < (numLength - d); i++) {\n            if (dataSet[i + d][column].split('')[0].toLowerCase() > dataSet[i][column].split('')[0].toLowerCase()) {\n                temp = dataSet[i + d];      // swap positions i+d and i\n                dataSet[i + d] = dataSet[i];\n                dataSet[i] = temp;\n                flag = 1;                  // tells swap has occurred\n            }\n        }\n    }\n    return dataSet;\n}\n","import { DataSource } from '@angular/cdk/table';\nimport {\n    BehaviorSubject,\n    Subscription,\n    Observable,\n    of as observableOf,\n    merge,\n    combineLatest\n} from 'rxjs';\nimport { SlkSortDirective, Sort } from '../sort/sort';\nimport { map } from 'rxjs/operators';\nimport * as methods from './grid-methods';\nimport { PageEvent, SlkPaginatorComponent } from '../paginator';\nimport { SlkGridFilterDirective } from '../grid-filter';\n\nexport class SlkGridDataSource<T> extends DataSource<T> {\n    /** Stream that emits when a new data array is set on the data source. */\n    private readonly _data: BehaviorSubject<T[]>;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    private readonly _renderData = new BehaviorSubject<T[]>([]);\n    /**\n     * Subscription to the changes that should trigger an update to table's rendered row, such\n     * as sorting, pagination or base data changes.\n     */\n    _renderChangesSubscription = Subscription.EMPTY;\n\n    /** Array of data that should be rendered by the table */\n    get data() { return this._data.value; }\n    set data(data: T[]) { this._data.next(data); }\n\n    /**\n     * Instance of the SlkSortDirective used by the table to control its sort\n     */\n    get sort(): SlkSortDirective | null { return this._sort; }\n    set sort(sort: SlkSortDirective | null) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    private _sort: SlkSortDirective | null;\n\n    get paginator(): SlkPaginatorComponent | null { return this._paginator; }\n    set paginator(paginator: SlkPaginatorComponent | null) {\n        // console.log('paginator', paginator);\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    private _paginator: SlkPaginatorComponent | null;\n\n    get filter(): SlkGridFilterDirective | null { return this._filter; }\n    set filter(filter: SlkGridFilterDirective | null) {\n        console.log('filter', filter);\n        this._filter = filter;\n        this._updateChangeSubscription();\n    }\n    private _filter: SlkGridFilterDirective | null;\n\n    /**\n     * Gets a sorted copy of the data array based on the state of the SlkSortDirective.\n     */\n    sortData: (\n        (data: T[], sort: SlkSortDirective, initial: boolean) => T[]\n    ) = (data: T[], sort: SlkSortDirective, initial: boolean): T[] => {\n        const active = sort.active;\n        const direction = sort.direction;\n\n        if (direction === '') { return data; }\n        if (initial) {\n            methods.quickSort(data, active, 0, data.length - 1);\n            data = methods._finalDataSet;\n            return data;\n        }\n\n        switch (direction) {\n            case 'asc':\n                return methods.shellSortAsc(data, active);\n            case 'desc':\n                return methods.shellSortDesc(data, active);\n            default: return data;\n        }\n    }\n\n    constructor(initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Subscribe to changes that should trigger an update to the table's rendered rows. */\n    _updateChangeSubscription() {\n        const sortChange: Observable<Sort | null> = this._sort ?\n            merge<Sort>(this._sort.slkSortChange, this._sort.initialised) :\n            observableOf(null);\n        const pageChange: Observable<PageEvent | null> = this._paginator ?\n            merge<PageEvent>(this._paginator.page, this._paginator.initialised) :\n            observableOf(null);\n        const filterChange: Observable<any | null> = this._filter ?\n            merge<any>(this._filter.slkFilterChange, this._filter.initialised) :\n            observableOf(null);\n\n\n        const dataStream = this._data;\n        // Watch for sort changes to provide ordered data\n        const orderedData = combineLatest(dataStream, sortChange)\n            .pipe(map(([data]) => this._orderData(data)));\n        const paginatedData = combineLatest(orderedData, pageChange)\n            .pipe(map(([data]) => this._pageData(data)));\n        const filteredData = combineLatest(paginatedData, filterChange)\n            .pipe(map(([data]) => this._filterData(data)));\n\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = filteredData.subscribe(data => this._renderData.next(data));\n    }\n\n    /**\n     * Returns a sorted copy of the data if SlkSortDirective has a sort applied, otherwise just returns the\n     * data array as provided.\n     */\n    _orderData(data: T[]): T[] {\n        // If there is no active sort or direction then return data.\n        if (!this.sort) { return data; }\n        return this.sortData(data.slice(), this.sort, false);\n    }\n    /**\n    * Returns a paged splice of the provided array according to the SlkPaginatorComponent's page\n    * index and length;\n    */\n    _pageData(data: T[]): T[] {\n        if (!this.paginator) { return data; }\n        const startIndex = (this.paginator.pageIndex - 1) * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    }\n\n    _filterData(data: T[]): T[] {\n        if (!this.filter) { return data; }\n\n        // Write following lines in separate function.\n        // Takes the new filtered array.\n        const filteredDataArray: any[] = [];\n\n        if (this._filter.active) {\n            console.log('1', this._filter.selectedOptions);\n\n            const key = this._filter.key ? this._filter.key : this._filter.active;\n\n            for (let i = 0; i < data.length; i++) {\n                for (let j = 0; j < this._filter.selectedOptions.length; j++) {\n                    if (data[i][key] === this._filter.selectedOptions[j]) {\n                        console.log('enter');\n                        filteredDataArray.push(data[i]);\n                    }\n                }\n            }\n            console.log('filteredDataArray', filteredDataArray);\n\n            return filteredDataArray;\n        } else {\n            return data;\n        }\n    }\n\n    /** Used by the SlkTable. Called when it connects to the data source. */\n    connect() { return this._renderData; }\n    /** Used by SlkTable, Called when it is destroyed. */\n    disconnect() { }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class SortDirectiveService {\n    private direction = new BehaviorSubject<string>('');\n    finalDir: Observable<string> = this.direction.asObservable();\n    catchFinalDir(dir: string) {\n        this.direction.next(dir);\n    }\n}\n","import { SortDirection } from './sort-header';\nimport {\n    Directive,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Input,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\nimport { SortDirectiveService } from './sort-directive.service';\n\n/** Interface for directive that holds sorting state consumed by SlkSortHeader */\nexport interface SlkSortable {\n    /** The id of the column being sorted. */\n    id: string;\n    /** Sort direction. */\n    start: 'asc' | 'desc';\n}\n\n/** Current sort state. */\nexport interface Sort {\n    /** The id of the column being sorted. */\n    active: string;\n    /** The Sort Direction */\n    direction: SortDirection;\n    initial: boolean;\n}\n\n/** Container for SlkSortables to manage the sort state and provide default sort paramters. */\n@Directive({\n    selector: '[slkSort]',\n    exportAs: 'slkSort'\n})\nexport class SlkSortDirective implements OnChanges, OnDestroy, OnInit {\n    /** Collection of all registered sortables that this directive manages. */\n    sortables = new Map<string, SlkSortable>();\n    /** Used to notify any child components listening to state changes. */\n    readonly _stateChanges = new Subject<void>();\n    /** Emit initialised value when directive is initialised. */\n    initialised = new BehaviorSubject<boolean>(false);\n\n    /** The id of the most recently sorted SlkSortable. */\n    @Input('slkSortActive') active: string;\n    /**\n     * The direction to set when an SlkSortable is initially sorted.\n     */\n    @Input('slkSortStart') start: 'asc' | 'desc' = 'asc';\n    /** The sort direction of the currently active SlkSortable. */\n    @Input('slkSortDirection')\n    get direction(): SortDirection { return this._direction; }\n    set direction(direction: SortDirection) {\n        this._direction = direction;\n    }\n    private _direction: SortDirection = '';\n    /** Event emiited when the user changes either the active sort or sort direction. */\n    @Output('slkSortChange') readonly slkSortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n    constructor(private sortDirService: SortDirectiveService) { }\n    /**\n     * Register function to be used by the contained SlkSortables. Adds the SlkSortable to\n     * the collection of SlkSortables.\n     */\n    register(sortable: SlkSortable): void {\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the container SlkSortables. Removes the SlkSortable from\n     * the collection of contained SlkSortables.\n     */\n    deregister(sortable: SlkSortable): void {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable: SlkSortable): void {\n        let initial = true;\n        if (this.active !== sortable.id) {\n            initial = false;\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        } else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortDirService.catchFinalDir(this.direction);\n        this.slkSortChange.emit({\n            active: this.active,\n            direction: this.direction,\n            initial: initial\n        });\n    }\n    /** Returns the next sort direction of the active sortable. */\n    getNextSortDirection(sortable: SlkSortable): SortDirection {\n        // Get the sort direction cycle.\n        const sortDirectionCycle = getSortDirectionCycle(sortable.start);\n        // Get and return the next direction in the cycle.\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this.initialised.next(true);\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this.initialised.complete();\n    }\n}\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc'): SortDirection[] {\n    const sortOrder: SortDirection[] = ['asc', 'desc'];\n    if (start === 'desc') { sortOrder.reverse(); }\n    return sortOrder;\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    OnDestroy,\n    OnInit,\n    Input,\n    Optional,\n    Renderer2\n} from '@angular/core';\nimport { SlkColumnDefDirective } from '../grid';\nimport { SlkSortDirective } from './sort';\nimport { take } from 'rxjs/operators';\nimport { SortDirectiveService } from './sort-directive.service';\nimport { ViewChild } from '@angular/core';\nimport { ElementRef } from '@angular/core';\n\nexport type SortDirection = 'asc' | 'desc' | '';\n\n@Component({\n    selector: '[slk-sort-header]',\n    exportAs: 'sortHeader',\n    template: `\n      <div class=\"slk-sort-header-container\">\n\n          <button (click)=\"onSort()\" class=\"slk-sort-header-button\" type=\"button\"> \n\n              <ng-content></ng-content>\n\n              <div class=\"slk-sort-header-pointer\">\n                  <div #sortBtn class=\"slk-sort-header-pointer-design\">\n                \n                  </div>\n              </div>\n          </button>\n\n          <div class=\"filter-header-wrapper\">\n              <ng-content select=\"slk-filter-header\"></ng-content>\n          </div>\n    \n      </div>\n    `,\n    styles: [`\n      .slk-sort-header-container{display:flex;cursor:pointer;align-items:center}.slk-sort-header-disabled .slk-sort-header-container{cursor:default}.slk-sort-header-button{margin:auto!important;border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.slk-sort-header-pointer{height:12px;width:12px;position:relative;display:flex}.slk-sort-header-pointer-down{border-top:5px solid #555}.slk-sort-header-pointer-down,.slk-sort-header-pointer-up{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;margin:auto;display:flex;align-items:center}.slk-sort-header-pointer-up{border-bottom:5px solid #000}.sort-header-wrapper{align-content:center}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkSortHeaderComponent implements OnDestroy, OnInit {\n    /** The direction the pointer should face as per sorted direction */\n    pointerDirection: SortDirection;\n\n    /** ID of the sort-header. When used with slkColumnDef, will default to column's name. */\n    @Input('slk-sort-header') id: string;\n    /** Overrides the sort start value of the containing SlkSort for this SlkSortable. */\n    @Input() start: 'asc' | 'desc';\n\n    @ViewChild('sortBtn') sortBtn: ElementRef;\n\n    constructor(\n        // changeDetectorRef: ChangeDetectorRef,\n        @Optional() public _sort: SlkSortDirective,\n        @Optional() public _slkColumnDef: SlkColumnDefDirective,\n        private renderer: Renderer2,\n        private sortDirService: SortDirectiveService\n    ) { }\n\n    /** Click event. When clicked will sort the data passing reference of this component to sort directive. */\n    onSort() {\n        this._sort.sort(this);\n\n        this.sortDirService.finalDir\n            .pipe(take(1))\n            .subscribe((direction) => {\n                switch (direction) {\n                    case 'asc':\n                        this.renderer.removeClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-down');\n                        this.renderer.addClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-up');\n                        return;\n                    case 'desc':\n                        this.renderer.removeClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-up');\n                        this.renderer.addClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-down');\n                        return;\n                    default:\n                        this.renderer.addClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-down');\n                        return;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (!this.id && this._slkColumnDef) {\n            this.id = this._slkColumnDef.name;\n        }\n        this._sort.register(this);\n    }\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        // this._rerenderSubscription.unsubscribe();\n    }\n\n    /** Returns the animation state for the arrow direction. */\n    _isSorted() {\n        return this._sort.active === this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkSortDirective } from './sort';\nimport { SlkSortHeaderComponent } from './sort-header';\nimport { SortDirectiveService } from './sort-directive.service';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [SlkSortDirective, SlkSortHeaderComponent],\n    declarations: [SlkSortDirective, SlkSortHeaderComponent],\n    providers: [SortDirectiveService]\n})\n\nexport class SlkSortModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SlkSortModule\n        };\n    }\n}\n","import {\n    Directive,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\n\nexport class SlkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n    /** Depth of the node. */\n    level: number;\n    /** Index location of node. */\n    index?: number;\n    /** Length of the number of total dataNodes */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node defintion for the SlkTreeComponent.\n * Captures the node's template\n */\n@Directive({\n    selector: '[slkTreeNodeDef]',\n    inputs: [\n        'when: slkTreeNodeDefWhen'\n    ]\n})\nexport class SlkTreeNodeDefDirective<T> {\n\n    when: (index: number, nodeData: T) => boolean;\n\n    constructor(\n        public template: TemplateRef<any>,\n        public viewContainer: ViewContainerRef\n    ) { }\n}\n\n","import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[slkTreeNodeOutlet]'\n})\nexport class SlkTreeNodeOutletDirective {\n    constructor(public viewContainer: ViewContainerRef) { }\n}\n","import {\n    Directive,\n    ViewContainerRef,\n    Input,\n    ElementRef,\n    Renderer2,\n    HostListener\n} from '@angular/core';\n\n@Directive({ selector: '[slkTreeTextOutlet]' })\nexport class SlkTreeTextOutletDirective<T> {\n    static mostRecentTreeTextOutlet: SlkTreeTextOutletDirective<{}> | null = null;\n\n    get data(): T { return this._data; }\n    set data(value: T) {\n        this._data = value;\n    }\n    protected _data: T;\n\n    get context(): any { return this._context; }\n    set context(value: any) {\n        this._context = value;\n    }\n    protected _context: any;\n\n    constructor() {\n        SlkTreeTextOutletDirective.mostRecentTreeTextOutlet = this as SlkTreeTextOutletDirective<T>;\n    }\n}\n\n\n@Directive({\n    selector: '[slkAction]',\n    // exportAs: 'slkAction'\n})\nexport class SlkTreeActionDirective {\n    @Input() on: boolean;\n    constructor(\n        public viewContainer: ViewContainerRef,\n        public elementRef: ElementRef,\n        public renderer: Renderer2\n    ) {\n        renderer.setStyle(elementRef.nativeElement, 'backgroundColor', '#e2e0e0');\n    }\n\n    @HostListener('mouseover') onMouseOver() {\n        const el = this.elementRef.nativeElement.querySelector('.actions');\n        this.renderer.setStyle(el, 'visibility', 'visible');\n    }\n    @HostListener('mouseout') onMouseOut() {\n        const el = this.elementRef.nativeElement.querySelector('.actions');\n        this.renderer.setStyle(el, 'visibility', 'hidden');\n    }\n}\n\n","import {\n    Directive,\n    OnDestroy,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { SlkTreeComponent } from './tree';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Tree node for SlkTreeComponent.\n */\n@Directive({\n    selector: 'slk-tree-node',\n    exportAs: 'slkTreeNode'\n})\nexport class SlkTreeNodeDirective<T> implements OnDestroy {\n    /**\n     * The most recently created SlkTreeNode. We save it in static variable so we can retreive it\n     * in 'SlkTreeComponent' and set the data to it.\n     */\n    static mostRecentTreeNode: SlkTreeNodeDirective<{}> | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    protected _destroyed = new Subject<void>();\n\n    /** The tree node's data. */\n    get data(): T { return this._data; }\n    set data(value: T) {\n        // console.log('value', value);\n        this._data = value;\n        this._setRoleFromData();\n    }\n    protected _data: T;\n\n    get isExpanded(): boolean {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    /**\n     * The role of the node should be group if its an internal node\n     * and treeitem if its a leaf node.\n     */\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _tree: SlkTreeComponent<T>\n    ) {\n        SlkTreeNodeDirective.mostRecentTreeNode = this as SlkTreeNodeDirective<T>;\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    private _setRoleFromData(): void {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        } else {\n            if (!this._tree.treeControl.getChildren) { }\n            this._tree.treeControl.getChildren(this._data).pipe(takeUntil(this._destroyed))\n                .subscribe((children: T[]) => {\n                    this.role = children && children.length ? 'group' : 'treeitem';\n                });\n        }\n    }\n}\n","import {\n    OnDestroy,\n    Input,\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    AfterContentChecked,\n    OnInit,\n    IterableDiffer,\n    TrackByFunction,\n    ViewChild,\n    ContentChildren,\n    IterableDiffers,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    IterableChangeRecord,\n    QueryList,\n    HostBinding,\n    EmbeddedViewRef,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { Subject, Observable, of as observableOf, Subscription, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { SlkTreeNodeDefDirective, SlkTreeNodeOutletContext } from './node';\nimport { SlkTreeNodeOutletDirective } from './outlet';\nimport { TreeControl } from './control/tree-control';\nimport { SlkTreeTextOutletDirective } from './tree-nest-outlet';\nimport { SlkTreeNodeDirective } from './node-directive';\n\n\n/**\n * Slk tree component that connects with a data source to retrieve data of type T and\n * renders dataNodes with heirarchy.\n */\n@Component({\n    selector: 'slk-tree',\n    exportAs: 'slkTree',\n    template: '<ng-container slkTreeNodeOutlet></ng-container>',\n    styles: [`\n      .tree-node-wrapper{cursor:pointer;position:relative;margin-top:20px;width:100%;height:35px;border:1px solid #e2e0e0}.actions{width:70px;position:absolute;display:flex;flex-direction:row;justify-content:space-between;bottom:0;right:0;padding-bottom:20px;padding-right:20px}.icon-plus:after{width:8px;height:2px;top:7px;left:4px}.icon-plus:after,.icon-plus:before{flex:1;background-color:#7e3232;border-radius:1px;-webkit-border-radius:1px;-moz-border-radius:1px;position:absolute;content:\"\"}.icon-plus:before{width:2px;height:8px;top:4px;left:7px}.edit.icon{flex:1;color:#000;position:absolute;margin-left:4px;margin-top:7px;width:14px;height:2px;border-radius:1px;border:1px solid #7e3232;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.edit.icon:before{flex:1;content:\"\";position:absolute;left:-12px;top:-1px;width:0;height:0;border-left:5px solid transparent;border-right:5px solid currentColor;border-top:2px solid transparent;border-bottom:2px solid transparent}.trash.icon{flex:1;color:#000;position:absolute;margin-left:5px;margin-top:7px;width:9px;height:10px;border-left:1px solid #7e3232;border-right:1px solid #7e3232;border-bottom:1px solid #7e3232;border-radius:0 0 2px 2px}.trash.icon:before{flex:1;content:\"\";position:absolute;left:-4px;top:-2px;width:17px;height:1px;background-color:#7e3232}.trash.icon:after{flex:1;content:\"\";position:absolute;left:0;top:-5px;width:7px;height:2px;border-left:1px solid currentColor;border-right:1px solid currentColor;border-top:1px solid currentColor;border-radius:4px 4px 0 0}.toggle{float:left;padding-top:15px;margin-right:10px}.toggle-wrapper{border:solid #000;border-width:0 3px 3px 0;display:inline-block;padding:3px}.expand{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.collapse{transform:rotate(45deg);-webkit-transform:rotate(45deg)}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkTreeComponent<T> implements\n    AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n\n    /** Subject that emits when the component has been destroyed. */\n    private _onDestroy = new Subject<void>();\n    /** Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<T>;\n    /** Stores the node definition that does not have a when predicate. */\n    public _defaultNodeDef: SlkTreeNodeDefDirective<T> | null;\n    /** Data subscription */\n    private _dataSubscription: Subscription | null;\n    /** Level of nodes */\n    private _levels: Map<T, number> = new Map<T, number>();\n\n    // public viewRef: ViewRef;\n    public embeddedViewRef: EmbeddedViewRef<any>;\n    public cacheEmbeddedViewRef: EmbeddedViewRef<any>[] = [];\n\n    public viewContainerRef: Array<any> = [];\n\n    @HostBinding('class') class = 'slk-tree';\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced\n     * by the tree's stream of view window.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        // console.log('dataSource', dataSource);\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n    /** the tree controller. */\n    @Input() treeControl: TreeControl<T>;\n    /**\n     * Tracking function will be used to check differences in data changes.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    /** Sends the re-ordered array on drop. */\n    @Output('reorderData') reorderData: EventEmitter<any> = new EventEmitter();\n\n    // @ViewChildren(SlkNestedTreeNodeDirective) public nestedTreeNode: SlkNestedTreeNodeDirective<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(SlkTreeNodeOutletDirective) _nodeOutlet: SlkTreeNodeOutletDirective;\n    /** The tree node template for the tree. */\n    @ContentChildren(SlkTreeNodeDefDirective) _nodeDefs: QueryList<SlkTreeNodeDefDirective<T>>;\n    /** Stream containing the latest info on what rows are being displayed on screen. */\n    viewChange = new BehaviorSubject<{ start: number, end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    constructor(\n        private _differs: IterableDiffers,\n        private _changeDetectorRef: ChangeDetectorRef,\n    ) { }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    }\n\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        // console.log('defaultnodedef', defaultNodeDefs);\n\n        this._defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            // console.log('enter');\n            this._observeRenderChanges();\n        }\n    }\n\n    private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private _observeRenderChanges() {\n        let dataStream: Observable<T[]> | undefined;\n\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n        // console.log('dataStream', dataStream);\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this._renderNodeChanges(data));\n        }\n    }\n\n    /** Check for changes made in the data nd render each change. */\n    _renderNodeChanges(data: T[], dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n        parentData?: T) {\n\n        const changes = dataDiffer.diff(data);\n        // console.log('changes', changes);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation(\n            (item: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\n                // console.log('tes', item, adjustedPreviousIndex, currentIndex);\n                // console.log('currentIndex', currentIndex);\n                if (item.previousIndex === null) {\n                    this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n                } else if (currentIndex === null) {\n                    viewContainer.remove(adjustedPreviousIndex);\n                } else {\n                    const view = viewContainer.get(adjustedPreviousIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * finds the matchin node defintion that should be used for this node data\n     */\n    _getNodeDef(data: T, i: number): SlkTreeNodeDefDirective<T> {\n        if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this._getNodeDef(nodeData, index);\n\n        /** Gets all the view container ref to check the index of view ref for drag and drop. */\n        this.viewContainerRef.push(viewContainer);\n\n        // Node context that will be provided to created embedded view\n        const context = new SlkTreeNodeOutletContext<T>(nodeData);\n\n        // If tree is flat tree, then use the getLevel function in flat tree control\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this._levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node;s nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n\n        /** Returns a view ref and store it in property. */\n        this.embeddedViewRef = container.createEmbeddedView(node.template, context, index);\n\n        /** Gets all the view ref to check with the view container ref for drag and drop. */\n        this.cacheEmbeddedViewRef.push(this.embeddedViewRef);\n\n        if (SlkTreeNodeDirective.mostRecentTreeNode) {\n            SlkTreeNodeDirective.mostRecentTreeNode.data = nodeData;\n        }\n        if (SlkTreeTextOutletDirective.mostRecentTreeTextOutlet) {\n            SlkTreeTextOutletDirective.mostRecentTreeTextOutlet.data = nodeData;\n            SlkTreeTextOutletDirective.mostRecentTreeTextOutlet.context = this.embeddedViewRef.context;\n        }\n    }\n\n    /** Emits a event for re ordered data. */\n    public reorderedData(data: any[]) {\n        this.reorderData.emit(data);\n    }\n}\n\n\n","import { Injectable } from '@angular/core';\nimport {\n    BehaviorSubject,\n    Observable,\n    Subject,\n    of as observableOf\n} from 'rxjs';\n\nexport interface CacheContent {\n    expiry?: number;\n    data: any;\n}\n\nexport const viewRefKey = 'view-ref';\nexport const viewRefContainer = 'view-ref-container';\n\nexport const dataNode = 'dataNode';\n\n@Injectable()\nexport class ActionsService {\n    private cache: Map<string, CacheContent> = new Map<string, CacheContent>();\n    private inFlightObseravbles: Map<string, Subject<any>> = new Map<string, Subject<any>>();\n    readonly DEFAULT_MAX_AGE: number = 300000;\n\n    private addAction = new BehaviorSubject<any>(false);\n\n    onAdd: Observable<any> = this.addAction.asObservable();\n    onActChange(changes: any) {\n        this.addAction.next(changes);\n    }\n\n    /**\n     * This method is an observables based in-memory cache implementation\n     * Keeps track of in flight observablesand sets a default expory for cached values\n     */\n    /**\n     * Gets the value from the cache if the key is provided.\n     * If no value exists in cache, then chcek if the call exists\n     * in flight, if so return the subejct, If not create a new\n     * Subject inFlightObservble and return the source obseravble.\n     */\n    get(key: string, fallback?: Observable<any>, maxAge?: number): Observable<any> | Subject<any> {\n        if (this.hasValidCachedValue(key)) {\n            return observableOf(this.cache.get(key).data);\n        }\n\n        if (!maxAge) {\n            maxAge = this.DEFAULT_MAX_AGE;\n        }\n\n        if (this.inFlightObseravbles.has(key)) {\n            return this.inFlightObseravbles.get(key);\n        } else {\n            return Observable.throw('Requested key is not available in the Cache');\n        }\n    }\n\n    set(key: string, value: any, maxAge: number = this.DEFAULT_MAX_AGE): void {\n        this.cache.set(key, { data: value, expiry: Date.now() + maxAge });\n        this.notifyInFlightObservers(key, value);\n    }\n    /**\n     * Checks if the key exists in cache\n     */\n    has(key: string): boolean {\n        return this.cache.has(key);\n    }\n    /**\n     * Publishes the value to all observers of the given\n     * in progress observables if observers exist.\n     */\n    private notifyInFlightObservers(key: string, value: any): void {\n        if (this.inFlightObseravbles.has(key)) {\n            const inFlight = this.inFlightObseravbles.get(key);\n            const observersCount = inFlight.observers.length;\n            if (observersCount) {\n                inFlight.next(value);\n            }\n            inFlight.complete();\n            this.inFlightObseravbles.delete(key);\n        }\n    }\n    /**\n     * Checks if key exists and has not expired\n     */\n    private hasValidCachedValue(key: string): boolean {\n        if (this.cache.has(key)) {\n            if (this.cache.get(key).expiry < Date.now()) {\n                this.cache.delete(key);\n                return false;\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n}\n","import {\n    Directive,\n    AfterContentInit,\n    OnDestroy,\n    IterableDiffer,\n    ContentChildren,\n    ElementRef,\n    IterableDiffers,\n    QueryList,\n    Renderer2,\n    EventEmitter,\n    ViewContainerRef,\n    OnInit,\n    HostListener,\n    Optional,\n    EmbeddedViewRef,\n} from '@angular/core';\nimport {\n    SlkTreeComponent\n} from './tree';\n\nimport { takeUntil } from 'rxjs/operators';\nimport { SlkTreeNodeOutletDirective } from './outlet';\nimport { ActionsService, viewRefKey, viewRefContainer } from './tree-service';\nimport { Observable } from 'rxjs';\nimport { SlkTreeNodeDirective } from './node-directive';\n\n@Directive({\n    selector: 'slk-nested-tree-node',\n    exportAs: 'slkNestedTreeNode',\n    providers: [\n        { provide: SlkTreeNodeDirective, useExisting: SlkNestedTreeNodeDirective },\n    ]\n})\nexport class SlkNestedTreeNodeDirective<T>\n    extends SlkTreeNodeDirective<T>\n    implements OnInit, AfterContentInit, AfterContentInit, OnDestroy {\n    /** Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<T>;\n    /** The children data dataNodes of current node. they will be placed in SlkTreeNodeOutletDirective */\n    protected _children: T[];\n\n    public addEvent: EventEmitter<any>;\n\n    public cachedData: Observable<any>;\n\n    /** Embedded view ref to be dropped in the container. */\n    _droppedViewRef: EmbeddedViewRef<any>;\n\n    /** The children node placeholder. */\n    @ContentChildren(SlkTreeNodeOutletDirective) nodeOutlet: QueryList<SlkTreeNodeOutletDirective>;\n\n    @HostListener('drop', ['$event'])\n    public drop(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        /** after drop event is fired get a reference of parent view container ref and its data */\n        const nodeContext = JSON.parse(event.dataTransfer.getData('nodeContext'));\n\n        /** Embeds the view when dropped to the dropped view container ref. */\n        this._embedView(nodeContext, this._viewContainer.injector);\n\n        /** Removes the dragged view ref from view container ref */\n        // this._removeView();\n    }\n\n    @HostListener('dragover', ['$event'])\n    public onDragOver(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _tree: SlkTreeComponent<T>,\n        protected _differs: IterableDiffers,\n        public _viewContainer: ViewContainerRef,\n        private renderer: Renderer2,\n        @Optional() private actionService: ActionsService\n    ) {\n        super(_elementRef, _tree);\n    }\n\n    ngOnInit() {\n        this.renderer.setStyle(this._elementRef.nativeElement, 'display', 'block');\n        this.renderer.setStyle(this._elementRef.nativeElement, 'padding-left', '40px');\n    }\n\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        // data coming from the parent class as mostRecentDataNode\n        this._tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((result: any) => {\n                // console.log('result', result);\n                this._children = result;\n                this.updateChildrenNodes();\n            });\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe((_) => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n\n        if (this.nodeOutlet.length && this._children) {\n            const viewContainer = this.nodeOutlet.first.viewContainer;\n            this._tree._renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        } else {\n            // Reset the data differ if theres no children nodes displated\n            this._dataDiffer.diff([]);\n        }\n    }\n\n    /** Embeds a view at the drop point */\n    protected _embbedView(context: any): void {\n        this._viewContainer.createEmbeddedView(this._tree._defaultNodeDef.template, context);\n        SlkTreeNodeDirective.mostRecentTreeNode.data = context.$implicit;\n    }\n\n    /** Embeds a view at the drop point */\n    protected _embedView(context: any, containerRef: any): void {\n        /** Finds the dropped container view ref from the collected embedded view ref. */\n        let containerRefToEmbed: any;\n        for (let i = 0; i < this._tree.viewContainerRef.length; i++) {\n            // Check for the embedded view ref inside the array to match with context\n            for (let j = 0; j < this._tree.viewContainerRef[i]._embeddedViews.length; j++) {\n                // test purpose remove it later\n                if (this._tree.viewContainerRef[i]._embeddedViews[j].context ===\n                    containerRef.view.context) {\n                    containerRefToEmbed = this._tree.viewContainerRef[i];\n                    break;\n                }\n            }\n        }\n        /** Finds the dropped view ref. */\n        let droppedViewRef: EmbeddedViewRef<any>;\n        for (let i = 0; i < this._tree.cacheEmbeddedViewRef.length; i++) {\n            if (this._tree.cacheEmbeddedViewRef[i].context === containerRef.view.context) {\n                droppedViewRef = this._tree.cacheEmbeddedViewRef[i];\n            }\n        }\n        /** Gets the view ref of the dragged object. */\n        this.actionService.get(viewRefKey)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((_viewRef: EmbeddedViewRef<any>) => {\n                // Get index of dropped view ref\n                const index = containerRefToEmbed.indexOf(droppedViewRef);\n                /** Moves the view ref into the view container ref of drop point. */\n                containerRefToEmbed.move(_viewRef, index);\n                /** Emits a event for re ordered data. */\n                this.reorderData(containerRefToEmbed._embeddedViews);\n            });\n    }\n\n    /** Removes the view from the drag point */\n    protected _removeView(): void {\n        // let currentViewRef: EmbeddedViewRef<any>,\n        let currentViewContainerRef: ViewContainerRef;\n        this.actionService.get(viewRefContainer)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((_viewContainerRef: ViewContainerRef) => {\n                currentViewContainerRef = _viewContainerRef;\n                const index = currentViewContainerRef.indexOf(this._droppedViewRef);\n                currentViewContainerRef.remove(index);\n            });\n    }\n\n    /** Sends data back to the user to re order the data. */\n    private reorderData(viewRef: EmbeddedViewRef<any>[]) {\n        const _reorderData = [];\n        for (let i = 0; i < viewRef.length; i++) {\n            _reorderData.push(viewRef[i].context.$implicit);\n        }\n        /** Sends a signal to tree component re order data method. */\n        this._tree.reorderedData(_reorderData);\n    }\n\n    /** Clear the children dataNodes */\n    protected _clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n}\n","import { TreeControl } from './tree-control';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable } from 'rxjs';\n\n\n\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n    /** Saved data node for expandAll action. */\n    dataNodes: T[];\n    /** A Selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n    /** Get depth of a given data node, return the level number. this is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     */\n    isExpandable: (dataNode: T) => boolean;\n    /** Get a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n    /** Toggles one single data node;s expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        this.expansionModel.toggle(dataNode);\n    }\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        this.expansionModel.select(dataNode);\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        this.expansionModel.deselect(dataNode);\n    }\n    /** Whether a given data node is expanded or not. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /** Toggles a subtree rooted at node recursively */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n    /** Gets a list of descendant data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n\n}\n","import { BaseTreeControl } from './base-tree-control';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /** Expands all dataNodes in the tree. */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n    /** Get a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants: T[] = [];\n        this._getDescendants(descendants, dataNode);\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    protected _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n        this.getChildren(dataNode).pipe(take(1)).subscribe(children => {\n            if (children && children.length > 0) {\n                children.forEach((child: T) => this._getDescendants(descendants, child));\n            }\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnInit,\n    Renderer2,\n    Directive,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    OnDestroy,\n    EmbeddedViewRef,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ActionsService, viewRefKey, viewRefContainer, dataNode } from './tree-service';\nimport { takeUntil } from 'rxjs/operators';\nimport { SlkTreeTextOutletDirective } from './tree-nest-outlet';\nimport { SlkNestedTreeNodeDirective } from './nested-node';\nimport { NestedTreeControl } from './control';\nimport { SlkTreeComponent } from './tree';\n\nexport class SlkContentActionContext {\n    public $implicit: any = null;\n    public appContentAction: any = null;\n}\n\n\n@Component({\n    selector: 'slk-tree-nest-text',\n    template: `\n      <div class=\"tree-node-wrapper\" appAction draggable=\"true\" (dragstart)=\"drag($event)\">\n\n          <div class=\"toggle\" (click)=\"onToggle()\">\n\n              <i [ngClass]=\"{'expand' : expand, 'toggle-wrapper' : expand}\"></i>\n\n              <i [ngClass]=\"{'collapse' : collapse, 'toggle-wrapper' : collapse}\"></i>\n\n          </div>\n\n          <!-- <ng-container *appContentAction=\"isAction; else noAction\"> -->\n          <!-- <input type=\"text\"> -->\n          <!-- </ng-container> -->\n\n          <!-- <ng-template #noAction> -->\n          <ng-content></ng-content>\n          <!-- </ng-template> -->\n\n          <div class=\"actions\" [style.visibility]=\"'hidden'\">\n\n              <div (click)=\"onAdd()\">\n                  <div class=\"icon icon-plus\"></div>\n              </div>\n\n              <div (click)=\"onDestroy()\">\n                  <div class=\"trash icon\"></div>\n              </div>\n\n              <div (click)=\"onEdit()\">\n                  <div class=\"edit icon\"></div>\n              </div>\n\n          </div>\n\n      </div>\n    `,\n    // template: ` <ng-container [ngTemplateOutlet]=\"template\"></ng-container>`,\n    // take the reference of child and pass it to ng-container\n    styles: [`\n      .tree-node-wrapper{cursor:pointer;position:relative;margin-top:20px;width:100%;height:35px;border:1px solid #e2e0e0}.actions{width:70px;position:absolute;display:flex;flex-direction:row;justify-content:space-between;bottom:0;right:0;padding-bottom:20px;padding-right:20px}.icon-plus:after{width:8px;height:2px;top:7px;left:4px}.icon-plus:after,.icon-plus:before{flex:1;background-color:#7e3232;border-radius:1px;-webkit-border-radius:1px;-moz-border-radius:1px;position:absolute;content:\"\"}.icon-plus:before{width:2px;height:8px;top:4px;left:7px}.edit.icon{flex:1;color:#000;position:absolute;margin-left:4px;margin-top:7px;width:14px;height:2px;border-radius:1px;border:1px solid #7e3232;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.edit.icon:before{flex:1;content:\"\";position:absolute;left:-12px;top:-1px;width:0;height:0;border-left:5px solid transparent;border-right:5px solid currentColor;border-top:2px solid transparent;border-bottom:2px solid transparent}.trash.icon{flex:1;color:#000;position:absolute;margin-left:5px;margin-top:7px;width:9px;height:10px;border-left:1px solid #7e3232;border-right:1px solid #7e3232;border-bottom:1px solid #7e3232;border-radius:0 0 2px 2px}.trash.icon:before{flex:1;content:\"\";position:absolute;left:-4px;top:-2px;width:17px;height:1px;background-color:#7e3232}.trash.icon:after{flex:1;content:\"\";position:absolute;left:0;top:-5px;width:7px;height:2px;border-left:1px solid currentColor;border-right:1px solid currentColor;border-top:1px solid currentColor;border-radius:4px 4px 0 0}.toggle{float:left;padding-top:15px;margin-right:10px}.toggle-wrapper{border:solid #000;border-width:0 3px 3px 0;display:inline-block;padding:3px}.expand{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.collapse{transform:rotate(45deg);-webkit-transform:rotate(45deg)}\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class SlkTreeNodeTextComponent<T>\n    extends SlkTreeTextOutletDirective<T>\n    implements OnInit, OnDestroy {\n    private _onDestroy: Subject<boolean> = new Subject();\n    isAction = false;\n\n    nestedTreeControl: NestedTreeControl<T>;\n\n    nodeMap = new Map<any, any>();\n\n    isExpandable = (node: any) => node.expandable;\n\n    expand: boolean;\n    collapse = false;\n\n    constructor(\n        private actionService: ActionsService,\n        public nestedNode: SlkNestedTreeNodeDirective<T>,\n        private treeComponent: SlkTreeComponent<T>,\n    ) {\n        super();\n\n        this.nestedTreeControl = new NestedTreeControl<any>(this.isExpandable);\n    }\n\n    ngOnInit() {\n        this.actionService.onAdd\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(result => {\n                this.isAction = result;\n            });\n\n        if (this.data && this.data.hasOwnProperty('children')) {\n            this.expand = true;\n        } else {\n            this.expand = false;\n        }\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    onToggle() {\n        this.treeComponent.treeControl.toggle(this.data);\n        this.actionService.set(dataNode, this.data);\n        // console.log('this.toggle', this.toggleDirective);\n        if (this.data && this.data.hasOwnProperty('children')) {\n            this.expand = false;\n            this.collapse = true;\n        } else {\n            this.expand = false;\n            this.collapse = false;\n        }\n    }\n\n    onAdd(node: any = this.data) {\n        // send a signal to the parent directive and make the directive\n        // aware about type of action.\n        // internally update dataSource as well\n        const parentNode = this.nodeMap.get(node);\n        node.children.push({});\n        const tree: any = this.treeComponent.dataSource;\n        tree.push(node);\n        this.treeComponent.dataSource = [...tree];\n        console.log('tree', tree);\n        this.nestedTreeControl.expand(node);\n    }\n    onDestroy() {\n        console.log('on destroy');\n        this.actionService.onActChange(false);\n    }\n    onEdit() {\n        console.log('on edit');\n        this.actionService.onActChange(true);\n    }\n    /** Drag and drop, have ViewContainers and move the view from one ViewContainer to other */\n    drag(event: DragEvent) {\n        let currentViewContainerRef;\n        for (let i = 0; i < this.treeComponent.viewContainerRef.length; i++) {\n            for (let j = 0; j < this.treeComponent.viewContainerRef[i]._embeddedViews.length; j++) {\n                if (this.treeComponent.viewContainerRef[i]._embeddedViews[j].context === this.context) {\n                    currentViewContainerRef = this.treeComponent.viewContainerRef[i];\n                    break;\n                }\n            }\n        }\n\n        let currentViewRef;\n        for (let i = 0; i < this.treeComponent.cacheEmbeddedViewRef.length; i++) {\n            if (this.treeComponent.cacheEmbeddedViewRef[i].context === this.context) {\n                currentViewRef = this.treeComponent.cacheEmbeddedViewRef[i];\n                break;\n            }\n        }\n\n        event.dataTransfer.setData('nodeContext', JSON.stringify(this.context));\n\n        /** Sets the current view ref and view container ref in the cache. */\n        this.actionService.set(viewRefKey, currentViewRef);\n        this.actionService.set(viewRefContainer, currentViewContainerRef);\n\n    }\n}\n\n\n\n/** Directive */\n@Directive({\n    selector: '[slkContentAction]'\n})\nexport class SlkAddActionDirective {\n    /** Context for the template. */\n    private _context: SlkContentActionContext = new SlkContentActionContext();\n    /** Stores template ref condition is not true. */\n    private _elseTemplateRef: TemplateRef<SlkContentActionContext> | null = null;\n    /** Stores template ref condition is true. */\n    private _thenTemplateRef: TemplateRef<SlkContentActionContext> | null = null;\n    private _elseViewRef: EmbeddedViewRef<SlkContentActionContext> | null = null;\n    private _thenViewRef: EmbeddedViewRef<SlkContentActionContext> | null = null;\n    @Input()\n    set appContentAction(condition: any) {\n        this._context.$implicit = this._context.appContentAction = condition;\n        this._updateView();\n    }\n    @Input()\n    set appContentActionElse(templateRef: TemplateRef<SlkContentActionContext> | null) {\n        this._elseTemplateRef = templateRef;\n        this._elseViewRef = null;\n        this._updateView();\n    }\n    constructor(\n        public renderer: Renderer2,\n        public templateRef: TemplateRef<any>,\n        public viewContainer: ViewContainerRef\n    ) {\n        this._thenTemplateRef = templateRef;\n    }\n\n    _updateView() {\n        if (this._context.$implicit) {\n            if (!this._thenViewRef) {\n                this.viewContainer.clear();\n                this._elseViewRef = null;\n                if (this._thenTemplateRef) {\n                    this._thenViewRef = this.viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                }\n            }\n        } else {\n            if (!this._elseViewRef) {\n                this.viewContainer.clear();\n                this._thenViewRef = null;\n                if (this._elseTemplateRef) {\n                    this._elseViewRef =\n                        this.viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                    /** Tested to check remove method. */\n                    // const index = this.viewContainer.indexOf(this._elseViewRef);\n                    // this.viewContainer.remove(index);\n                }\n            }\n        }\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkTreeComponent } from './tree';\nimport { SlkTreeNodeDefDirective } from './node';\nimport { SlkNestedTreeNodeDirective } from './nested-node';\nimport { SlkTreeNodeOutletDirective } from './outlet';\nimport { SlkTreeTextOutletDirective } from './tree-nest-outlet';\nimport { SlkTreeNodeTextComponent, SlkAddActionDirective } from './tree-nest-node';\nimport { ActionsService } from './tree-service';\nimport { SlkTreeActionDirective } from './tree-nest-outlet';\nimport { SlkTreeNodeDirective } from './node-directive';\n\nconst EXPORTED_DECLARATIONS = [\n    SlkTreeComponent,\n    SlkTreeNodeDirective,\n    SlkTreeNodeDefDirective,\n    SlkNestedTreeNodeDirective,\n    SlkTreeNodeOutletDirective,\n    SlkTreeNodeTextComponent,\n    SlkTreeTextOutletDirective,\n    SlkTreeActionDirective,\n    SlkAddActionDirective\n];\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [\n        SlkTreeNodeDefDirective,\n        ActionsService\n    ]\n})\nexport class SlkTreeModule { }\n","import {\n    Directive,\n    ViewContainerRef,\n    TemplateRef,\n} from '@angular/core';\n\n@Directive({\n    selector: '[slkNavigator]'\n})\nexport class SlkNavDirective {\n    constructor(public viewContainer: ViewContainerRef) { }\n}\n\n@Directive({\n    selector: '[slkPageIndex]'\n})\nexport class SlkPageIndexDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild,\n    ContentChild,\n    TemplateRef,\n    AfterContentInit,\n    IterableDiffer,\n    IterableDiffers,\n    IterableChangeRecord,\n    EmbeddedViewRef,\n} from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { SlkNavDirective, SlkPageIndexDirective } from './page-nav';\nimport { ActionsService } from '../tree/tree-service';\nimport { takeUntil } from 'rxjs/operators';\n\n/** Reference code */\n// export const PAGINATOR_CHILD_TEMPLATE = `<ng-container appNavigator\n// *ngTemplateOutlet=\"pageBtnTemplate, context: {$implicit: ctx}\"></ng-container>`;\nexport const PAGINATOR_CHILD_TEMPLATE = `<ng-container slkNavigator></ng-container>`;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n    /** Current page index. */\n    pageIndex: number;\n    /** The current page size. */\n    pageSize: number;\n    /** The current total number of items being paged. */\n    length: number;\n}\n\nexport class PaginatorContext<T> {\n    $implicit: T;\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\nlet count = 0;\nlet actualCount = 0;\n\nexport const viewContainerRef = 'view-container-ref';\n\n/** TODO:- Put Comments After every line */\n@Component({\n    selector: 'slk-paginator-child',\n    template: PAGINATOR_CHILD_TEMPLATE,\n    styles: [`\n      .page-controller{background:#fff;border-radius:3px;width:27px;height:27px;cursor:pointer;margin-left:10px}\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class SlkPaginatorChildComponent implements OnInit, AfterContentInit {\n    /** Total pages. */\n    private _pages: any;\n    /** Watches for the change. */\n    private _dataDiffer: IterableDiffer<any>;\n\n    public viewRefCollection: EmbeddedViewRef<any>[] = [];\n    /** Gets the 'length' from parent component. */\n    @Input()\n    get length(): number { return this._length; }\n    set length(value: number) {\n        this._length = value;\n    }\n    private _length: number;\n\n    /** Gets the 'pageSize' from parent component. */\n    @Input()\n    get pageSize(): number { return this._pageSize; }\n    set pageSize(value: number) {\n        this._pageSize = value;\n    }\n    private _pageSize: number;\n\n    /** Queries 'SlkNavDirective' Gets the view container ref from 'SlkNavDirective'. */\n    @ViewChild(SlkNavDirective) nav: SlkNavDirective;\n\n    /** Queries whenever ContentChild changes. Read as TemplateRef. */\n    @ContentChild(SlkPageIndexDirective, { read: TemplateRef }) pageBtnTemplate: TemplateRef<any>;\n\n    constructor(\n        private _differs: IterableDiffers,\n        private cacheService: ActionsService\n    ) { }\n\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create();\n    }\n    ngAfterContentInit() {\n        this.renderIndex();\n    }\n\n    /** Inserts buttons as per total pages */\n    private renderIndex() {\n        // Get the count of pages to be displayed by the user.\n        count = Math.ceil(this.length / this.pageSize);\n        actualCount = count;\n        // Makes a array to iterate over the total pages needed. Should not be more than 5 buttons.\n        if (count > 5) {\n            count = 7;\n        } else {\n            count = count + 2;\n        }\n        // console.log('count', count);\n        const array = Array.from(Array(count).keys());\n        // Gets the context in a array and the template to be inserted.\n        this._pages = this._getAllIndexes(array);\n        // Captures the changes in dataDiffer.\n        const changes = this._dataDiffer.diff(this._pages);\n\n        changes.forEachOperation(\n            (record: IterableChangeRecord<any>, prevIndex: number, currenIndex: number) => {\n                if (record.previousIndex === null) {\n                    this.insertButtons(record.item);\n                }\n            }\n        );\n\n        this.cacheService.set(viewContainerRef, this.viewRefCollection);\n    }\n\n    private _getAllIndexes(indices: Array<any>): any[] {\n        return indices.map((_, i) => {\n            let pageNo: string, disabled: boolean;\n            switch (i) {\n                case 0:\n                    pageNo = '<';\n                    disabled = true;\n                    break;\n                case 1:\n                    pageNo = i.toString();\n                    disabled = true;\n                    break;\n                case indices.length - 1:\n                    pageNo = '>';\n                    disabled = false;\n                    break;\n                default:\n                    pageNo = i.toString();\n                    disabled = false;\n                    break;\n            }\n            return {\n                page: pageNo,\n                temp: this.pageBtnTemplate,\n                index: i,\n                disabled: disabled\n            };\n        });\n    }\n\n    private insertButtons(data: any) {\n        const ctxData = { page: data.page, index: data.index, disabled: data.disabled };\n        const context = new PaginatorContext<any>(ctxData);\n        const collectionViewRef = this.nav.viewContainer.createEmbeddedView(data.temp, context, data.index);\n        this.viewRefCollection.push(collectionViewRef);\n        // console.log('this.view', this.viewRefCollection);\n    }\n}\n\n@Component({\n    selector: 'slk-paginator',\n    template: `\n      <slk-paginator-child \n          [length]=\"_length\" \n          [pageSize]=\"_pageSize\">\n\n          <ng-container *slkPageIndex=\"let item\">\n\n              <button \n                  [disabled]=\"item.disabled\"\n                  class=\"page-controller\" \n                  (click)=\"onPaged(item.index, item.page)\">\n                  {{ item.page }}\n              </button>\n\n          </ng-container>\n\n      </slk-paginator-child>\n    `,\n    styles: [`\n      .page-controller{background:#fff;border-radius:3px;width:27px;height:27px;cursor:pointer;margin-left:10px}\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class SlkPaginatorComponent implements\n    OnInit,\n    OnDestroy {\n\n    public initialised: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Notifies when the component is destroyed. */\n    _onDestroy: Subject<boolean> = new Subject();\n\n    /** Gets the view ref collection. */\n    collectedViewRef: EmbeddedViewRef<any>[] = [];\n\n    /** Index of the page to be displayed. */\n    @Input()\n    get pageIndex(): number { return this._pageIndex; }\n    set pageIndex(value: number) {\n        this._pageIndex = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    private _pageIndex = 1;\n\n    /** Length of total number of items that are being paginated. */\n    @Input()\n    get length(): number { return this._length; }\n    set length(value: number) {\n        this._length = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    private _length = 0;\n\n    /** Number of items to be displayed on a page. Set a default value. */\n    @Input()\n    get pageSize(): number { return this._pageSize; }\n    set pageSize(value: number) {\n        this._pageSize = value;\n    }\n    private _pageSize: number;\n\n    /** The set of provided page size options to display to the user. */\n    @Input()\n    get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n    set pageSizeOptions(value: number[]) {\n        this._pageSizeOptions = (value || []).map(p => p);\n    }\n    private _pageSizeOptions: number[] = [];\n\n    /** Event emitted when page changes. */\n    @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n    /** Displayed set of page size options. */\n    _displayedPageSizeOptions: number[];\n\n    constructor(\n        public _changeDetectorRef: ChangeDetectorRef,\n        public cacheService: ActionsService\n    ) { }\n\n    ngOnInit() { this.initialised.next(true); }\n\n    ngOnDestroy() {\n        this.initialised.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    onPaged(index: number, page?: string) {\n        // Increment or decrement 'pageIndex' as the user clicks on the buttons.\n        if (index === 0) {\n            this.pageIndex--;\n        } else if (index === count - 1) {\n            this.pageIndex++;\n        } else {\n            this.pageIndex = index;\n        }\n        // console.log('index', index);\n        if (actualCount > count) {\n            if (index === count - 1) {\n                // Check if the pageIndex has reached the last button.\n                if (this.pageIndex >= 5) {\n                    // Now Change the context of currently available buttons\n                    this.incrementButtonContext();\n                    return;\n                }\n            }\n            if (index === 0) {\n                console.log(0);\n                // Now Change the context of currently available buttons.\n                this.decrementButtonContext(page);\n                return;\n            }\n            if (index === 1) {\n                console.log(1);\n                this.collectedViewRef[1].context.$implicit.disabled = true;\n                this._onPaged();\n                return;\n            }\n        }\n        /** Emits a event to update the data source. */\n        this._onPaged();\n        /** Changes contexts of button. */\n        this.changeContextOfButtons(this.pageIndex);\n    }\n    /** Changes the context on reaching last index. */\n    incrementButtonContext(): void {\n        // Increase the page number by 1 to display.\n\n        // Disable the right arrow if pageIndex has exceeded.\n        if (this.pageIndex >= actualCount) {\n            this.collectedViewRef[6].context.$implicit.disabled = true;\n        }\n        if (this.pageIndex === 5) {\n            this.collectedViewRef[5].context.$implicit.disabled = true;\n            this.collectedViewRef[4].context.$implicit.disabled = false;\n        }\n        // Not to be incremented if the last pageIndex is 5\n        if (this.pageIndex !== 5) {\n            for (let i = 0; i < this.collectedViewRef.length; i++) {\n                // Increase the number of page by 1.\n                if (i !== 0 && i !== 6) {\n                    this.collectedViewRef[i].context.$implicit.page =\n                        (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) + 1).toString();\n                    // Disable the currenlty selected pageIndex.\n                    if (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) === this.pageIndex) {\n                        this.collectedViewRef[i].context.$implicit.disabled = true;\n                    } else {\n                        this.collectedViewRef[i].context.$implicit.disabled = false;\n                    }\n                }\n            }\n        }\n\n        /** Emits a event to update the data source. */\n        this._onPaged();\n    }\n\n    /** Changes the context on reaching previous index. */\n    decrementButtonContext(page: string): void {\n        // console.log('pageIndex', page);\n        if (parseInt(page, 10) === 0) {\n            // console.log('disabled decrement');\n            this.collectedViewRef[0].context.$implicit.disabled = true;\n        }\n        for (let i = 0; i < this.collectedViewRef.length; i++) {\n            // Decrease the number of page by 1.\n            if (i !== 0 && i !== 6) {\n                this.collectedViewRef[i].context.$implicit.page =\n                    (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) - 1).toString();\n                // Disable the currently selected pageIndex.\n                if (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) === this.pageIndex) {\n                    this.collectedViewRef[i].context.$implicit.disabled = true;\n                } else {\n                    this.collectedViewRef[i].context.$implicit.disabled = false;\n                }\n            }\n        }\n\n        /** Emits a event to update the data source. */\n        this._onPaged();\n    }\n\n    _onPaged(): void {\n        /** Emits a event to notify dataSource and update the page with right data. */\n        this.page.emit({\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n\n    /**\n     * Disables the page buttons as per selected index desired by the user.\n     */\n    changeContextOfButtons(pageInd: number): void {\n        // console.log('pageInd', pageInd);\n        this.cacheService.get(viewContainerRef)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((viewRef: EmbeddedViewRef<any>[]) => {\n\n                // Store the viewRef in a property to be used by this class.\n                this.collectedViewRef = viewRef;\n\n                // Check if the currently selected page index is less than 1 and disable start 2 index page buttons\n                // Check if the currently selected page index is equal or greater than the highest page index.\n                // Check if the currently selected page index is in the middle or none or above\n                if (pageInd === 5) {\n                    for (let i = 0; i < viewRef.length; i++) {\n                        if (i === 5) {\n                            viewRef[i].context.$implicit.disabled = true;\n                        } else {\n                            viewRef[i].context.$implicit.disabled = false;\n                        }\n                    }\n                }\n                if (pageInd !== 5) {\n                    if (pageInd > 1 && pageInd < viewRef.length - 2) {\n                        this.enableAll(viewRef, pageInd);\n                    } else if (pageInd >= viewRef.length - 2) {\n                        this.disableEndIndex(viewRef);\n                    } else {\n                        this.disableStartIndex(viewRef);\n                    }\n                }\n\n            });\n    }\n    /** Disables the button at the start indices. */\n    disableStartIndex(viewRef: EmbeddedViewRef<any>[]): void {\n        for (let i = 0; i < viewRef.length; i++) {\n            if (i < 2) {\n                viewRef[i].context.$implicit.disabled = true;\n            } else {\n                viewRef[i].context.$implicit.disabled = false;\n            }\n        }\n    }\n    /** Disables the button at the end indices. */\n    disableEndIndex(viewRef: EmbeddedViewRef<any>[]): void {\n        for (let i = 0; i < viewRef.length; i++) {\n            if (i >= viewRef.length - 2) {\n                viewRef[i].context.$implicit.disabled = true;\n            } else {\n                viewRef[i].context.$implicit.disabled = false;\n            }\n        }\n    }\n    /** Enables all the button. */\n    enableAll(viewRef: EmbeddedViewRef<any>[], pageInd: number): void {\n        for (let i = 0; i < viewRef.length; i++) {\n            if (viewRef[i].context.$implicit.index === pageInd) {\n                viewRef[i].context.$implicit.disabled = true;\n            } else {\n                viewRef[i].context.$implicit.disabled = false;\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkPaginatorChildComponent, SlkPaginatorComponent } from './paginator';\nimport { SlkNavDirective, SlkPageIndexDirective } from './page-nav';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        SlkPaginatorComponent,\n        SlkPaginatorChildComponent,\n        SlkNavDirective,\n        SlkPageIndexDirective\n    ],\n    declarations: [\n        SlkPaginatorComponent,\n        SlkPaginatorChildComponent,\n        SlkNavDirective,\n        SlkPageIndexDirective\n    ]\n})\nexport class SlkPaginatorModule { }\n","import {\n    Directive,\n    OnInit,\n    OnDestroy,\n    Output,\n    EventEmitter,\n    Input,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Directive({\n    selector: '[slkFilter]',\n    exportAs: 'slkFilter'\n})\nexport class SlkGridFilterDirective implements OnInit, OnDestroy {\n    /** Collection of all registered filters that this directive manages. */\n    filterColumns = new Map<string, any>();\n    /** emit initialised value when directive is initialised. */\n    initialised = new BehaviorSubject<boolean>(false);\n\n    public selectedOptions: any[] = [];\n    public key: string | number;\n    /** The id of the most recently filtered column. */\n    @Input('slkFilterActive') active: string | number;\n\n    /** Event emitted when user types a keyword. */\n    @Output('slkFilterChange') readonly slkFilterChange: EventEmitter<any> = new EventEmitter();\n\n    constructor() { }\n\n    /** Gets the word and the active column for filtering. */\n    public filter(selectedOptions: any[], columnId: string | number, key?: any): void {\n        if (key) {\n            this.key = key;\n        }\n        this.selectedOptions = selectedOptions;\n        this.active = columnId;\n        this.slkFilterChange.emit({ data: selectedOptions });\n    }\n    ngOnInit() {\n        this.initialised.next(true);\n    }\n    ngOnDestroy() {\n        this.initialised.complete();\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    OnInit,\n    OnDestroy,\n    Inject\n} from '@angular/core';\nimport { OPTIONS_DIALOG_DATA } from '../grid-filter';\nimport { ActionsService } from '../tree';\n\nexport const selectedOptions = 'selected-options';\n\n@Component({\n    selector: 'slk-filter-popup',\n    template: `\n      <div class=\"dropdown\">\n\n          <div class=\"dropdown-button\">\n              Please Select\n          </div>\n\n          <ul class=\"dropdown-selection\">\n\n              <!-- later create these tags dynamically -->\n\n              <li class=\"container\" *ngFor=\"let d of data;let i = index;\">\n\n                  <div class=\"checkmark\">\n                      <span>{{ d.name }}</span>\n                  </div>\n\n                  <div class=\"checkbox\">\n                      <input type=\"checkbox\" [checked]=\"d.checked\" [value]=\"i\" (input)=\"onInputChange($event.target.value)\">\n                  </div>\n\n              </li>\n\n          </ul>\n\n      </div>\n    `,\n    styles: [`\n      .dropdown{display:inline-block;position:relative;font-size:16px;font-family:Arial}.dropdown-button{background:#3498db;min-width:100px;color:#fff;letter-spacing:.025rem;box-sizing:border-box;padding:10px 30px 10px 20px;position:relative;cursor:pointer;transition:background .3s ease}.dropdown-button:hover{background:#2980b9;transition:background .3s ease}.dropdown ul{direction:ltr;padding:0;list-style:none;box-shadow:0 2px 6px 0 rgba(0,0,0,.2);position:absolute;left:0;margin-top:2px;top:100%;min-width:100%;max-height:250px;overflow:auto}.dropdown li{background:#fff;padding:8px 10px 8px 15px;box-sizing:border-box;cursor:pointer;transition:background .2s ease;overflow:hidden}.dropdown li:hover{background:#f6f6f6;transition:background .2s ease}.checkmark{float:left;height:3vh}.checkbox{float:right;width:20%;height:3vh}.container{position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.container .checkbox input{position:absolute;cursor:pointer}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class SlkGridPopupComponent<T> implements\n    OnInit,\n    OnDestroy {\n    // protected _onDestroy: Subject<any> = new Subject();\n\n    protected collectedVal: T[] = [];\n\n    constructor(\n        @Inject(OPTIONS_DIALOG_DATA) public data: any[],\n        protected cacheService: ActionsService\n    ) {\n        this.data.unshift({ name: 'Select All', checked: false });\n    }\n\n    ngOnInit() {\n    }\n    ngOnDestroy() {\n        // this._onDestroy.next();\n        // this._onDestroy.complete();\n    }\n\n    onInputChange(value: any) {\n        // Select all\n        if (parseInt(value, 10) === 0) {\n            const updatedData = this.data.map((obj: any) => {\n                if (this.data[0].checked) {\n                    return {\n                        ...obj,\n                        checked: false\n                    }\n                } else {\n                    return {\n                        ...obj,\n                        checked: true\n                    }\n                }\n            });\n            this.data = updatedData;\n            const cachedData = updatedData.map((obj: any) => {\n                return obj.name;\n            });\n            this.cacheService.set(selectedOptions, cachedData);\n        } else {\n            this.collectedVal.push(this.data[value].name);\n            // Cache the selected values.\n            this.cacheService.set(selectedOptions, this.collectedVal);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkGridPopupComponent } from './grid-popup';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [SlkGridPopupComponent],\n    declarations: [SlkGridPopupComponent],\n})\nexport class SlkGridPopupModule { }\n","import { OverlayRef } from '@angular/cdk/overlay';\n\nexport class SlkGridFilterRef {\n    constructor(private overlayRef: OverlayRef) { }\n\n    close(): void {\n        this.overlayRef.dispose();\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const OPTIONS_DIALOG_DATA =\n    new InjectionToken<any>('OPTIONS_DIALOG_DATA');\n","import {\n    Injectable,\n    ComponentRef,\n    Injector,\n    ElementRef,\n} from '@angular/core';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    OriginConnectionPosition,\n    OverlayConnectionPosition\n} from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { SlkGridPopupComponent } from '../grid-popup';\nimport { SlkGridFilterRef } from './grid-filter-ref';\nimport { OPTIONS_DIALOG_DATA } from './grid-filter-tokens';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n// Each property can be overriden by the consumer\ninterface OptionsDialogConfig {\n    panelClass?: string;\n    hasBackdrop?: boolean;\n    backdropClass?: string;\n    data?: any[];\n}\n\nconst DEFAULT_CONFIG: OptionsDialogConfig = {\n    hasBackdrop: true,\n    backdropClass: 'no-style-backdrop',\n    panelClass: 'slk-options-dialog-panel',\n    data: []\n};\n\n@Injectable()\nexport class DomService {\n    onClose: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    // onCloseBehavior = observableOf(this.onClose);\n    onCloseBehavior: Observable<any> = this.onClose.asObservable();\n\n    constructor(\n        private injector: Injector,\n        private overlay: Overlay\n    ) { }\n\n    open(elementRef: ElementRef, config: any = {}) {\n        // Over ride default configuration\n        const dialogConfig = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        // Returns an OverlayRef (which is a PortalHost)\n        const overlayRef = this.createOverlay(dialogConfig, elementRef);\n        // Instantiate remote control\n        const dialogRef = new SlkGridFilterRef(overlayRef);\n\n        const overlayComponent = this.attachDialogContainer(overlayRef, dialogConfig, dialogRef);\n\n        overlayRef.backdropClick().subscribe(_ => {\n            this.onClose.next(true);\n            dialogRef.close();\n        });\n\n        return dialogRef;\n    }\n\n    private createOverlay(config: OptionsDialogConfig, elementRef: ElementRef) {\n        const overlayConfig = this.getOverlayConfig(config, elementRef);\n        return this.overlay.create(overlayConfig);\n    }\n\n    private attachDialogContainer(overlayRef: OverlayRef, config: OptionsDialogConfig, dialogRef: SlkGridFilterRef) {\n        const injector = this.createInjector(config, dialogRef);\n        const containerPortal = new ComponentPortal(SlkGridPopupComponent, null, injector);\n        const containerRef: ComponentRef<SlkGridPopupComponent<any>> = overlayRef.attach(containerPortal);\n        return containerRef.instance;\n    }\n\n    private createInjector(\n        config: OptionsDialogConfig,\n        dialogRef: SlkGridFilterRef): PortalInjector {\n        // Instantiate new WeakMap for our custom injection tokens\n        const injectionTokens = new WeakMap();\n\n        // Set customs injection tokens\n        injectionTokens.set(SlkGridFilterRef, dialogRef);\n        injectionTokens.set(OPTIONS_DIALOG_DATA, config.data);\n\n        // Instantiate new PortalInjector\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    private getOverlayConfig(config: OptionsDialogConfig, elementRef: ElementRef): OverlayConfig {\n        // const positionStrategy = this.overlay.position()\n        //     .global()\n        //     .centerHorizontally()\n        //     .centerVertically();\n        const positionStrategy = this._getPosition(elementRef);\n        // debugger;\n\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.backdropClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n        // debugger;\n\n        return overlayConfig;\n    }\n\n    _getPosition(elementRef: ElementRef): any {\n        const origin = {\n            topLeft: { originX: 'start', originY: 'top' } as OriginConnectionPosition,\n            topRight: { originX: 'end', originY: 'top' } as OriginConnectionPosition,\n            bottomLeft: { originX: 'start', originY: 'bottom' } as OriginConnectionPosition,\n            bottomRight: { originX: 'end', originY: 'bottom' } as OriginConnectionPosition,\n            topCenter: { originX: 'center', originY: 'top' } as OriginConnectionPosition,\n            bottomCenter: { originX: 'center', originY: 'bottom' } as OriginConnectionPosition,\n        };\n        const overlay = {\n            topLeft: { overlayX: 'start', overlayY: 'top' } as OverlayConnectionPosition,\n            topRight: { overlayX: 'end', overlayY: 'top' } as OverlayConnectionPosition,\n            bottomLeft: { overlayX: 'start', overlayY: 'bottom' } as OverlayConnectionPosition,\n            bottomRight: { overlayX: 'end', overlayY: 'bottom' } as OverlayConnectionPosition,\n            topCenter: { overlayX: 'center', overlayY: 'top' } as OverlayConnectionPosition,\n            bottomCenter: { overlayX: 'center', overlayY: 'bottom' } as OverlayConnectionPosition,\n        };\n\n        return this.overlay.position()\n            .connectedTo(elementRef, origin.bottomLeft, overlay.topLeft)\n            .withOffsetY(10)\n            .withDirection('rtl')\n            .withFallbackPosition(origin.bottomRight, overlay.topRight)\n            .withFallbackPosition(origin.topLeft, overlay.bottomLeft)\n            .withFallbackPosition(origin.topRight, overlay.bottomRight)\n            .withFallbackPosition(origin.topCenter, overlay.bottomCenter)\n            .withFallbackPosition(origin.bottomCenter, overlay.topCenter);\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    OnInit,\n    OnDestroy,\n    HostListener,\n    Optional,\n    Input,\n    ViewContainerRef,\n    ElementRef,\n} from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { SlkGridFilterDirective } from './filter';\nimport { SlkColumnDefDirective, SlkTableComponent } from '../grid';\nimport { DomService } from './grid-filter-service';\nimport { SlkGridPopupComponent, selectedOptions } from '../grid-popup';\nimport { ActionsService } from '../tree/tree-service';\nimport { takeUntil } from 'rxjs/operators';\n\n\nexport const actualData = 'actual-data';\n/** The max height of the filter's overlay panel */\nexport const FILTER_PANEL_MAX_HEIGHT = 256;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const FILTER_PANEL_VIEWPORT_PADDING = 8;\n\n@Component({\n    selector: 'slk-filter-header',\n    template: `\n      <div class=\"triangle-down\"></div>\n    `,\n    styles: [`\n      .triangle-down{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:20px solid #555;float:right}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkGridFilterComponent<T>\n    implements\n    OnInit,\n    OnDestroy {\n    /** When this component is initialised. */\n    public initialised: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    /** Destroy. */\n    public _onDestroy: Subject<any> = new Subject();\n    public _popup: SlkGridPopupComponent<T>;\n\n    private initialData: any[];\n\n    /** Gets the metadata if provided by the user.\n     * Has to Follow a format,\n     * TODO:- Get the format final\n     */\n\n    @Input('metadata') public metadata: any[];\n    public key: string | number;\n\n    /** ID of the filter-header. When used with slkColumndef, will default to column's name. */\n    @Input('slk-filter-header') id: string;\n    @HostListener('click')\n    onFilterChange(): void {\n        // Get the id of the selected filter and filter all unique values.\n        // Then pass the data to the popup component\n        let uniqueOptions;\n        if (!this.initialData) {\n            uniqueOptions = this._filterUniqueValues(this.id, this._grid.copyOfData);\n\n            this.initialData = this._grid.copyOfData.slice();\n            this.cacheService.set(actualData, this.initialData);\n            this.openPopup(uniqueOptions);\n            return;\n        } else {\n            this.cacheService.get(actualData)\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe((data: any[]) => {\n                    uniqueOptions = this._filterUniqueValues(this.id, data);\n                    this.openPopup(uniqueOptions);\n                    return;\n                });\n        }\n    }\n\n    constructor(\n        @Optional() public _filter: SlkGridFilterDirective,\n        @Optional() public _slkColumnDef: SlkColumnDefDirective,\n        public viewContainerRef: ViewContainerRef,\n        private _elementRef: ElementRef,\n        private domService: DomService,\n        private _grid: SlkTableComponent<any>,\n        protected cacheService: ActionsService\n    ) { }\n    ngOnInit() {\n        this.initialised.next(true);\n        // Sets the id for every column name\n        this.id = this._slkColumnDef.name;\n    }\n\n    ngOnDestroy() {\n        this.initialised.complete();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Opens the popup filter. */\n    private openPopup(uniqueOptions: any[]) {\n        // Opens a dialog and injects data in the entryComponent.\n        const overlayOptionsRef = this.domService.open(\n            this._elementRef,\n            { data: uniqueOptions }\n        );\n\n        // Subscribes to on close behavior\n        this._filterClose();\n    }\n\n    /** Subscribes to the on closed behavior. */\n    _filterClose() {\n        // When the filter popup is closed.\n        this.domService.onCloseBehavior\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((isClosed: any) => {\n                if (isClosed) {\n                    this._getSelectedValues();\n                }\n            });\n    }\n\n    /** Gets the selected values in the unique filter drop down. */\n    _getSelectedValues() {\n        this.cacheService.get(selectedOptions)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((selectedValues: any[]) => {\n                // Send the selected values to filter data in the grid.\n                this._filter.filter(selectedValues, this.id, this.key);\n            });\n    }\n\n    /**  Filters the unique values in the column. */\n    _filterUniqueValues(columnId: string, data: T[]): T[] {\n        // Stores the unique filters value in an array.\n        const uniqueValuesInTheColumn: any[] = [];\n        let uniqueValues: any[] = [];\n        let options: any[] = [];\n\n        if (this.metadata) {\n            for (let i = 0; i < this.metadata.length; i++) {\n                if (this.metadata[i].name === this.id) {\n                    // has to be id or a specific format supported\n                    this.key = this.metadata[i].reference_id;\n                    break;\n                }\n            }\n            for (let i = 0; i < data.length; i++) {\n                uniqueValuesInTheColumn.push(data[i][this.key]);\n            }\n            // remove duplicates\n            uniqueValues = this._removeDuplicates(uniqueValuesInTheColumn);\n            options = this._options(uniqueValues);\n            return options;\n\n        } else {\n\n            for (let i = 0; i < data.length; i++) {\n                uniqueValuesInTheColumn.push(data[i][columnId]);\n            }\n            uniqueValues = this._removeDuplicates(uniqueValuesInTheColumn);\n            options = this._options(uniqueValues);\n            return options;\n        }\n\n\n    }\n    /** Removes duplicates. */\n    _removeDuplicates(uniqueValuesInTheColumn: any[]): any[] {\n        return uniqueValuesInTheColumn.filter((element, pos) => {\n            return uniqueValuesInTheColumn.indexOf(element) === pos;\n        });\n    }\n\n    _options(uniqueValues: any[]) {\n        return uniqueValues.map((eachEl: any, index: number) => {\n            return {\n                name: eachEl,\n                checked: false\n            };\n        });\n    }\n\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkGridFilterComponent } from './grid-filter';\nimport { SlkGridFilterDirective } from './filter';\nimport { DomService } from './grid-filter-service';\nimport { SlkGridPopupComponent } from '../grid-popup';\nimport { SlkGridPopupModule } from '../grid-popup';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        SlkGridPopupModule,\n        OverlayModule\n    ],\n    exports: [SlkGridFilterComponent, SlkGridFilterDirective],\n    declarations: [SlkGridFilterComponent, SlkGridFilterDirective],\n    entryComponents: [\n        // Needs to be added here because otherwise we can't\n        // dynamically render this component at runtime\n        SlkGridPopupComponent\n    ],\n    providers: [DomService]\n})\nexport class SlkFilterModule { }\n"],"names":["BehaviorSubject","this","totalColumns","asObservable","DirectiveService","columns","next","length","Injectable","SLK_ROW_TEMPLATE","BaseRowDef","template","_differs","changes","_columnsDiffer","currentValue","find","create","diff","column","that","SlkHeaderRowDefDirective","headerCell","SlkFooterRowDefDirective","footerCell","cell","extractCellTemp","SlkHeaderRowDefBase","__extends","directiveService","_super","_this","ngOnChanges","slkHeaderRowDef","setTotalColumns","Directive","selector","TemplateRef","IterableDiffers","Input","SlkFooterRowDefBase","SlkRowDefDirective","slkRowDefColumns","_viewContainer","SlkCellOutletDirective","mostRecentCellOutlet","ViewContainerRef","renderer","elementRef","addClass","nativeElement","Component","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","styles","Renderer2","ElementRef","SlkColumnDefBase","SlkColumnDefDirective","_name","name","cssClassFriendlyName","ContentChild","SlkCellDefDirective","SlkHeaderCellDefDirective","SlkFooterCellDefDirective","BaseSlkCell","columnDef","columnClassName","classList","add","Subject","SlkHeaderCellDirective","totalColumnsAsObservable","pipe","takeUntil","destroy","subscribe","cols","setStyle","SlkCellDirective","viewContainer","SLK_TABLE_TEMPLATE","EmbeddedViewRef","_changeDetectorRef","_elementRef","Map","Set","EventEmitter","start","end","Number","MAX_VALUE","SlkTableComponent","_length","value","_trackByFn","fn","isDevMode","console","warn","JSON","stringify","_dataSource","dataSource","_switchDataSource","nodeName","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","data","_cacheRowDefs","_cacheColumnDefs","_renderUpdatedColumns","_rowDefs","_renderChangeSubscription","_observeRenderChanges","_rowOutlet","clear","_headerRowOutlet","_footerRowOutlet","_onDestroy","complete","DataSource","disconnect","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","remove","view","get","move","_data","_addScrollEvent","renderRows","i","renderRowsForData","_getRenderRowsForData","j","renderRow","push","_getRowDefs","map","rowDef","_columnDefsByName","mergeQueryListAndSet","_contentColumnDefs","_customColumnDefs","forEach","set","_headerRowDefs","_contentHeaderRowDefs","_customHeaderRowDefs","_footerRowDefs","_contentFooterRowDefs","_customFooterRowDefs","_contentRowDefs","_customRowDefs","defaultRowDefs","filter","def","when","_defaultRowDef","columnsDiffReducer","acc","getColumnsDiff","reduce","_forceRenderDataRows","_forceRenderHeaderRows","_forceRenderFooterRows","unsubscribe","dataStream","connect","Function","Observable","Array","isArray","observableOf","copyOfData","slice","_renderRow","rowDefs","renderIndex","context","$implicit","outlet","index","createEmbeddedView","_a","_b","_getCellTemplates","cellTemplate","markForCheck","from","columnId","extractCellTemplate","sections_1","tag","section","element","document","createElement","appendChild","getElementsByTagName","addEventListener","event","stopImmediatePropagation","onScroll","tbodyViewHeight","target","offsetHeight","tbodyScrollHeight","scrollHeight","scrollLocation","scrollTop","limit","totalPages","pageIndex","scrollToBottom","emit","totalRows","exportAs","ChangeDetectorRef","Output","ViewChild","DataRowOutletDirective","HeaderRowOutletDirective","FooterRowOutletDirective","ContentChildren","HostBinding","queryList","toArray","concat","EXPORTED_DECLARATIONS","SlkRowComponent","SlkFooterCellDirective","SlkHeaderRowComponent","SlkFooterRowComponent","SlkGridModule","ngModule","NgModule","imports","CommonModule","exports","declarations","providers","_finalDataSet","dataSet","left","right","temp","low","high","pivot","Math","floor","split","toLowerCase","swap","partition","quickSort","SlkGridDataSource","initialData","Subscription","EMPTY","sort","initial","active","direction","methods.quickSort","methods._finalDataSet","gap","currentStr","methods.shellSortAsc","flag","numLength","d","methods.shellSortDesc","_updateChangeSubscription","Object","_sort","_paginator","paginator","_filter","log","sortChange","merge","slkSortChange","initialised","pageChange","page","filterChange","slkFilterChange","orderedData","combineLatest","_orderData","paginatedData","_pageData","filteredData","_filterData","_renderChangesSubscription","_renderData","sortData","startIndex","pageSize","splice","filteredDataArray","selectedOptions","key","SortDirectiveService","dir","sortDirService","SlkSortDirective","_direction","sortable","sortables","id","delete","getNextSortDirection","catchFinalDir","sortDirectionCycle","sortOrder","reverse","getSortDirectionCycle","nextDirectionIndex","indexOf","_stateChanges","_slkColumnDef","SlkSortHeaderComponent","finalDir","take","removeClass","sortBtn","register","deregister","Optional","SlkSortModule","SlkTreeNodeOutletContext","inputs","SlkTreeTextOutletDirective","mostRecentTreeTextOutlet","_context","SlkTreeActionDirective","el","querySelector","HostListener","_tree","SlkTreeNodeDirective","mostRecentTreeNode","_setRoleFromData","treeControl","isExpanded","getLevel","_destroyed","isExpandable","role","getChildren","children","SlkTreeComponent","_nodeOutlet","_dataSubscription","defaultNodeDefs","_nodeDefs","_defaultNodeDef","_renderNodeChanges","dataDiffer","parentData","adjustedPreviousIndex","insertNode","detectChanges","first","nodeData","node","_getNodeDef","viewContainerRef","level","_levels","has","container","embeddedViewRef","cacheEmbeddedViewRef","reorderData","SlkTreeNodeOutletDirective","SlkTreeNodeDefDirective","addAction","ActionsService","fallback","maxAge","hasValidCachedValue","cache","DEFAULT_MAX_AGE","inFlightObseravbles","throw","expiry","Date","now","notifyInFlightObservers","inFlight","observers","actionService","SlkNestedTreeNodeDirective","preventDefault","stopPropagation","nodeContext","parse","dataTransfer","getData","_embedView","injector","result","_children","updateChildrenNodes","nodeOutlet","_","_clear","ngOnDestroy","containerRef","containerRefToEmbed","droppedViewRef","_embeddedViews","_viewRef","currentViewContainerRef","_viewContainerRef","_droppedViewRef","viewRef","_reorderData","reorderedData","provide","useExisting","BaseTreeControl","SelectionModel","dataNode","expansionModel","toggle","select","deselect","isSelected","collapseDescendants","expandDescendants","toBeProcessed","getDescendants","NestedTreeControl","allNodes","dataNodes","accumulator","descendants","_getDescendants","child","SlkContentActionContext","nestedNode","treeComponent","expandable","nestedTreeControl","SlkTreeNodeTextComponent","onAdd","isAction","hasOwnProperty","expand","collapse","nodeMap","tree","onActChange","currentViewRef","setData","templateRef","_thenTemplateRef","SlkAddActionDirective","condition","appContentAction","_updateView","_elseTemplateRef","_elseViewRef","_thenViewRef","PageEvent","PaginatorContext","count","actualCount","cacheService","SlkPaginatorChildComponent","_pageSize","ceil","array","keys","_pages","_getAllIndexes","currenIndex","insertButtons","viewRefCollection","indices","pageNo","disabled","toString","pageBtnTemplate","ctxData","collectionViewRef","nav","SlkNavDirective","SlkPageIndexDirective","read","SlkPaginatorComponent","_pageIndex","_pageSizeOptions","p","incrementButtonContext","decrementButtonContext","collectedViewRef","_onPaged","changeContextOfButtons","parseInt","pageInd","enableAll","disableEndIndex","disableStartIndex","SlkGridFilterDirective","unshift","checked","SlkGridPopupComponent","updatedData","obj","cachedData","collectedVal","Inject","OPTIONS_DIALOG_DATA","SlkGridFilterRef","overlayRef","dispose","InjectionToken","DEFAULT_CONFIG","hasBackdrop","backdropClass","panelClass","overlay","onClose","DomService","config","dialogConfig","createOverlay","dialogRef","attachDialogContainer","backdropClick","close","overlayConfig","getOverlayConfig","createInjector","containerPortal","ComponentPortal","attach","instance","injectionTokens","WeakMap","PortalInjector","positionStrategy","_getPosition","OverlayConfig","scrollStrategy","scrollStrategies","block","origin","originX","originY","overlayX","overlayY","position","connectedTo","withOffsetY","withDirection","withFallbackPosition","Injector","Overlay","domService","_grid","SlkGridFilterComponent","uniqueOptions","_filterUniqueValues","openPopup","open","_filterClose","onCloseBehavior","isClosed","_getSelectedValues","selectedValues","uniqueValuesInTheColumn","uniqueValues","metadata","reference_id","_removeDuplicates","_options","pos","eachEl","SlkGridPopupModule","OverlayModule","entryComponents"],"mappings":"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"}