{"version":3,"file":"ngx-sleek.js","sources":["../../tmp/grid/directive-service.ts","../../tmp/grid/row.ts","../../tmp/grid/cell.ts","../../tmp/grid/grid.ts","../../tmp/grid/grid.module.ts","../../tmp/grid/grid-methods.ts","../../tmp/grid/data-source.ts","../../tmp/sort/sort-directive.service.ts","../../tmp/sort/sort.ts","../../tmp/sort/sort-header.ts","../../tmp/sort/sort-module.ts","../../tmp/tree/node.ts","../../tmp/tree/outlet.ts","../../tmp/tree/tree-nest-outlet.ts","../../tmp/tree/node-directive.ts","../../tmp/tree/tree.ts","../../tmp/tree/tree-service.ts","../../tmp/tree/nested-node.ts","../../tmp/tree/control/base-tree-control.ts","../../tmp/tree/control/nested-tree-control.ts","../../tmp/tree/tree-nest-node.ts","../../tmp/tree/tree-module.ts","../../tmp/paginator/page-nav.ts","../../tmp/paginator/paginator.ts","../../tmp/paginator/paginator-module.ts","../../tmp/grid-filter/filter.ts","../../tmp/grid-popup/grid-popup.ts","../../tmp/grid-popup/grid-popup.module.ts","../../tmp/grid-filter/grid-filter-ref.ts","../../tmp/grid-filter/grid-filter-tokens.ts","../../tmp/grid-filter/grid-filter-service.ts","../../tmp/grid-filter/grid-filter.ts","../../tmp/grid-filter/grid-module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class DirectiveService {\n    private totalColumns = new BehaviorSubject<number>(0);\n    totalColumnsAsObservable: Observable<number> = this.totalColumns.asObservable();\n    setTotalColumns(columns: any[]) {\n        this.totalColumns.next(columns.length);\n    }\n}\n","import {\n    IterableDiffer,\n    IterableDiffers,\n    TemplateRef,\n    SimpleChanges,\n    OnChanges,\n    IterableChanges,\n    ViewContainerRef,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    Component,\n    Directive,\n    Input,\n    Renderer2,\n    ElementRef,\n    OnInit\n} from '@angular/core';\nimport { SlkColumnDefDirective, SlkCellDef } from './cell';\nimport { DirectiveService } from './directive-service';\n\n/**\n * The row template that can be used by the slk-table.\n */\nexport const SLK_ROW_TEMPLATE = `<ng-container slkCellOutlet></ng-container>`;\n\n/**\n * Base class for the SlkHeaderRowDef and SlkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nexport abstract class BaseRowDef implements OnChanges {\n    /** The columns to be displayed on this row. */\n    columns: Iterable<string>;\n\n    /** Differ used to check if any changes were made to the columns. */\n    protected _columnsDiffer: IterableDiffer<any>;\n\n    constructor(\n        public template: TemplateRef<any>,\n        protected _differs: IterableDiffers\n    ) { }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        // console.log('this.columns from row', this.columns);\n        // create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            // console.log('columns from row', columns);\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or ull\n     * if there is no difference.\n     */\n    getColumnsDiff(): IterableChanges<any> | null {\n        return this._columnsDiffer.diff(this.columns);\n    }\n\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column: SlkColumnDefDirective): TemplateRef<any> {\n        // console.log('column from row', column, this instanceof SlkHeaderRowDefDirective);\n        return extractCellTemp(this, column);\n    }\n\n}\n\nexport class SlkHeaderRowDefBase extends BaseRowDef { }\n// export const _SlkHeaderRowDefBase = mixinHasStickyInput(SlkHeaderRowDefBase);\n\n/**\n * Header row definition for the slk table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n    selector: '[slkHeaderRowDef]',\n})\nexport class SlkHeaderRowDefDirective extends SlkHeaderRowDefBase implements OnChanges, OnInit {\n    @Input('slkHeaderRowDef') slkHeaderRowDef: any;\n    @Input() columns: any;\n\n    constructor(\n        template: TemplateRef<any>,\n        _differs: IterableDiffers,\n        private directiveService: DirectiveService\n    ) {\n        super(template, _differs);\n        // console.log('appHeaderRowDef', this.appHeaderRowDef);\n    }\n\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n        this.columns = this.slkHeaderRowDef;\n    }\n\n    ngOnInit() {\n        this.directiveService.setTotalColumns(this.columns);\n    }\n}\n\nexport class SlkFooterRowDefBase extends BaseRowDef { }\n\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n    selector: '[slkFooterRowDef]'\n})\nexport class SlkFooterRowDefDirective extends BaseRowDef implements OnChanges {\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n        super(template, _differs);\n    }\n\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n    }\n}\n\nfunction extractCellTemp(that: any, column: any): TemplateRef<any> {\n    if (that instanceof SlkHeaderRowDefDirective) {\n        return column.headerCell.template;\n    } if (that instanceof SlkFooterRowDefDirective) {\n        return column.footerCell.template;\n    } else {\n        return column.cell.template;\n    }\n}\n\n/**\n * Data row definition for the slk table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n@Directive({\n    selector: '[slkRowDef]'\n})\nexport class SlkRowDefDirective<T> extends BaseRowDef implements OnChanges {\n    @Input('slkRowDefColumns') slkRowDefColumns: any;\n    @Input() columns: any;\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or undedined to default.\n     */\n    when: (index: number, rowDatA: T) => boolean;\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n        super(template, _differs);\n        // console.log('appRowDefColumns', this.appRowDef);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n        this.columns = this.slkRowDefColumns;\n        // console.log('appRowDefColumns1', this.appRowDef);\n    }\n}\n\n/** Context provided to the row cells */\nexport interface SlkCellOutletRowContext<T> {\n    /** Data for the row that this cell is located within. */\n    $implicit?: T;\n\n    /** Index of the data object in the provided data array. */\n    index?: number;\n\n    /** Length of the number of total rows. */\n    count?: number;\n\n    /** True if this cell is contained in the first row. */\n    first?: boolean;\n\n    /** True if this cell is contained in the last row. */\n    last?: boolean;\n\n    /** true if this is containeed in a row with even-numbered index. */\n    even?: boolean;\n\n    /** True if this cell is contained in a row with an odd-numbered index. */\n    odd?: boolean;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n */\n@Directive({ selector: '[slkCellOutlet]' })\nexport class SlkCellOutletDirective {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet: SlkCellOutletDirective | null = null;\n    /** The ordered list of cells to render within this outlet's view container */\n    cells: SlkCellDef[];\n\n    /** the data context to be provided to each cell. */\n    context: any;\n\n    constructor(public _viewContainer: ViewContainerRef) {\n        // console.log('this this', this);\n        SlkCellOutletDirective.mostRecentCellOutlet = this;\n    }\n}\n\n/** Header template container that container the cell outlet. */\n@Component({\n    selector: 'slk-header-row, tr[slk-header-row]',\n    template: SLK_ROW_TEMPLATE,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `]\n})\nexport class SlkHeaderRowComponent {\n    constructor(private renderer: Renderer2, elementRef: ElementRef) {\n        this.renderer.addClass(elementRef.nativeElement, 'header-row');\n    }\n}\n\n/** Footer template container that contains the cell outlet. */\n@Component({\n    selector: 'slk-footer-row, tr[slk-footer-row]',\n    template: SLK_ROW_TEMPLATE,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `]\n})\nexport class SlkFooterRowComponent { }\n\n/** Data row template container that contains cell outlet. */\n@Component({\n    selector: 'slk-row, tr[slk-row]',\n    template: SLK_ROW_TEMPLATE,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `]\n})\nexport class SlkRowComponent {\n    constructor(private renderer: Renderer2, elementRef: ElementRef) {\n        this.renderer.addClass(elementRef.nativeElement, 'header-row');\n    }\n}\n\n","import {\n    TemplateRef,\n    Directive,\n    Input,\n    ContentChild,\n    ElementRef,\n    OnInit,\n    Renderer2,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DirectiveService } from './directive-service';\nimport { takeUntil } from 'rxjs/operators';\n\n/** Base interface for a cell definition. */\nexport interface SlkCellDef {\n    template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a Slk Table.\n */\n@Directive({ selector: '[slkCellDef]' })\nexport class SlkCellDefDirective implements SlkCellDef {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * Header cell defintion for a Slk table.\n */\n@Directive({ selector: '[slkHeaderCellDef]' })\nexport class SlkHeaderCellDefDirective implements SlkCellDef {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * Footer cell defintion for a Slk table.\n */\n@Directive({ selector: '[slkFooterCellDef]' })\nexport class SlkFooterCellDefDirective implements SlkCellDef {\n    constructor(public template: TemplateRef<any>) { }\n}\n\nexport class SlkColumnDefBase { }\n\n/**\n * Column definition for the Slk table.\n */\n@Directive({\n    selector: '[slkColumnDef]'\n})\nexport class SlkColumnDefDirective extends SlkColumnDefBase {\n    /** Unique name for this column. */\n    @Input('slkColumnDef')\n    get name(): string { return this._name; }\n    set name(name: string) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        if (!name) { return; }\n\n        this._name = name;\n        this.cssClassFriendlyName = name;\n    }\n    _name: string;\n\n    @ContentChild(SlkCellDefDirective) cell: SlkCellDef;\n    @ContentChild(SlkHeaderCellDefDirective) headerCell: SlkHeaderCellDefDirective;\n    @ContentChild(SlkFooterCellDefDirective) footerCell: SlkFooterCellDefDirective;\n\n    /**\n     * Transformed version of the column name that can be used a part of css classname.\n     */\n    cssClassFriendlyName: string;\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseSlkCell {\n    constructor(columnDef: SlkColumnDefDirective, elementRef: ElementRef) {\n        const columnClassName = `slk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n\n/** Header cell template container. */\n@Directive({\n    selector: 'slkHeaderCell, th[slkHeaderCell]'\n})\nexport class SlkHeaderCellDirective extends BaseSlkCell implements OnInit {\n    destroy = new Subject<boolean>();\n    constructor(\n        columnDef: SlkColumnDefDirective,\n        private elementRef: ElementRef,\n        private directiveService: DirectiveService,\n        private renderer: Renderer2\n    ) {\n        super(columnDef, elementRef);\n    }\n\n    ngOnInit() {\n        this.directiveService.totalColumnsAsObservable\n            .pipe(takeUntil(this.destroy))\n            .subscribe((cols: number) => {\n                const totalColumns = 100 / cols;\n                this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${totalColumns}%`);\n                this.destroy.next(true);\n            });\n\n    }\n}\n\n/** Footer cell template container */\n@Directive({\n    selector: 'slkFooterCell, th[slkFooterCell]'\n})\nexport class SlkFooterCellDirective extends BaseSlkCell {\n    constructor(columnDef: SlkColumnDefDirective, elementRef: ElementRef) {\n        super(columnDef, elementRef);\n    }\n}\n\n/** Cell template container */\n@Directive({\n    selector: 'slkCell, td[slkCell]'\n})\nexport class SlkCellDirective extends BaseSlkCell implements OnInit {\n    destroy = new Subject<boolean>();\n    constructor(\n        columnDef: SlkColumnDefDirective,\n        private elementRef: ElementRef,\n        private directiveService: DirectiveService,\n        private renderer: Renderer2\n    ) {\n        super(columnDef, elementRef);\n    }\n\n    ngOnInit() {\n        this.directiveService.totalColumnsAsObservable\n            .pipe(takeUntil(this.destroy))\n            .subscribe((cols: number) => {\n                const totalColumns = 100 / cols;\n                this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${totalColumns}%`);\n                this.destroy.next(true);\n            });\n\n    }\n}\n","import {\n    ViewContainerRef,\n    Directive,\n    ElementRef,\n    EmbeddedViewRef,\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    AfterContentChecked,\n    OnDestroy,\n    IterableDiffer,\n    Input,\n    ContentChildren,\n    IterableDiffers,\n    ChangeDetectorRef,\n    OnInit,\n    ViewChild,\n    IterableChangeRecord,\n    TemplateRef,\n    QueryList,\n    TrackByFunction,\n    isDevMode,\n    HostBinding,\n    Renderer2,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\n\nimport { Subject, Subscription, Observable, BehaviorSubject, of as observableOf } from 'rxjs';\n\n// import {\n//     getTableUnknownDataSourceError,\n//     getTableUnknownColumnError,\n//     getTableMultipleDefaultRowDefsError,\n//     getTableDuplicateColumnNameError\n// } from '@app/shared/grid/table-errors';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n    SlkCellOutletRowContext,\n    SlkRowDefDirective,\n    SlkHeaderRowDefDirective,\n    SlkFooterRowDefDirective,\n    BaseRowDef,\n    SlkCellOutletDirective\n} from './row';\nimport {\n    SlkColumnDefDirective\n} from './cell';\n\n/** Interface used to provide an outlet for rows to be inserted into. */\nexport interface RowOutlet {\n    viewContainer: ViewContainerRef;\n}\n\n/** Provides a handle for the table to grab the view container's ng-container to insert data rows. */\n@Directive({\n    selector: '[slkRowOutlet]'\n})\nexport class DataRowOutletDirective implements RowOutlet {\n    constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/** Provides a handle for the table to grab the view container's ng-container to insert the header */\n@Directive({\n    selector: '[slkHeaderRowOutlet]'\n})\nexport class HeaderRowOutletDirective implements RowOutlet {\n    constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/** Provides a handle for the table to grab view container's ng-container to insert the footer. */\n@Directive({\n    selector: '[slkFooterRowOutlet]'\n})\nexport class FooterRowOutletDirective implements RowOutlet {\n    constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/**\n * The table template that can be used by slk-table\n */\nexport const SLK_TABLE_TEMPLATE = `\n    <ng-container slkHeaderRowOutlet></ng-container>\n    <ng-container slkRowOutlet></ng-container>\n    <ng-container slkFooterRowOutlet></ng-container>\n`;\n\n/**\n * Class used to conveniently type the embedded view ref for rows with a context\n */\nabstract class RowViewRef<T> extends EmbeddedViewRef<SlkCellOutletRowContext<T>> { }\n\n/**\n * Set of properties that represents the identity of a single rendered row.\n */\nexport interface RenderRow<T> {\n    data: T;\n    dataIndex: number;\n    rowDef: SlkRowDefDirective<T>;\n}\n\n/**\n * A data table that can render a header row, data rows and a footer row.\n */\n@Component({\n    selector: 'slk-table, table[slk-table]',\n    exportAs: 'slkTable',\n    template: SLK_TABLE_TEMPLATE,\n    styles: [`\n      .slk-grid{width:100%}.header-row{background:#fff;text-align:center;min-height:5vh;overflow:hidden;margin:0;padding:0;border-bottom:.1vh solid #e2d9d9}.table-slk-grid{display:block;table-layout:fixed;height:90%;width:96%;margin:2%;border-collapse:collapse;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:all .3s cubic-bezier(.25,.8,.25,1);background-color:#f3f3f3}.table-slk-grid tbody{height:calc(100% - 5vh);overflow-y:auto;width:100%}.table-slk-grid tbody,.table-slk-grid td,.table-slk-grid th,.table-slk-grid thead,.table-slk-grid tr{display:block}.table-slk-grid tbody td,.table-slk-grid thead th{float:left;align-items:baseline}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkTableComponent<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n    /** Latest data provided by the data source. */\n    protected _data: T[];\n    public copyOfData: T[];\n\n    /** Subject that emits when the component has been destoryed. */\n    private _onDestroy = new Subject<void>();\n\n    /** List of the rendered rows as identified by their `RenderRow` object. */\n    private _renderRows: RenderRow<T>[];\n\n    /** Subscription that listens for the data provided by the data source. */\n    private _renderChangeSubscription: Subscription | null;\n\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    private _columnDefsByName = new Map<string, SlkColumnDefDirective>();\n\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     */\n    private _rowDefs: SlkRowDefDirective<T>[];\n\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using 'ContentChildren' as well as any custom row defintions added to\n     * '_customHeaderRowDefs'.\n     */\n    private _headerRowDefs: SlkHeaderRowDefDirective[];\n\n    /**\n     * Set of all footer row definitions that can be used by this table. Populated by the rows\n     * gathered by using 'ContentChildren' as well as any custom row defintions added to\n     * '_customFooterRowDefs'.\n     */\n    private _footerRowDefs: SlkFooterRowDefDirective[];\n\n    /** _Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<RenderRow<T>>;\n\n    /** Stores the row definition that does not have a when predicate. */\n    private _defaultRowDef: SlkRowDefDirective<T> | null;\n\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *it's* content child.\n     */\n    private _customColumnDefs = new Set<SlkColumnDefDirective>();\n\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *it's* content child.\n     */\n    private _customRowDefs = new Set<SlkRowDefDirective<T>>();\n\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *it's* content child.\n     */\n    private _customHeaderRowDefs = new Set<SlkHeaderRowDefDirective>();\n\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *it's* content child.\n     */\n    private _customFooterRowDefs = new Set<SlkFooterRowDefDirective>();\n\n    // TODO:- Later connect it with dataSource. After filter is implmented.\n    /** Page Index. */\n    pageIndex = 1;\n    /** Emits an event when scroll has reached the bottom. */\n    @Output('scrollToBottom') scrollToBottom: EventEmitter<any> = new EventEmitter<any>();\n    /** Gets the total number of rows that has to be displayed. */\n    @Input()\n    get length(): number { return this._length; }\n    set length(value: number) {\n        this._length = value;\n    }\n    private _length: number;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input()\n    get trackBy(): TrackByFunction<T> { return this._trackByFn; }\n    set trackBy(fn: TrackByFunction<T>) {\n        if (isDevMode() &&\n            fn != null && typeof fn !== 'function' &&\n            <any>console && <any>console.warn) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    private _trackByFn: TrackByFunction<T>;\n\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    private _dataSource: DataSource<T> | Observable<T[]> | T[] | T[];\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as heuristic of what data should be provided.\n     */\n    viewChange: BehaviorSubject<{ start: number, end: number }> =\n        new BehaviorSubject<{ start: number, end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    // Outlets in the table's template where the header, data rows, and footer will be inserted.\n    @ViewChild(DataRowOutletDirective) _rowOutlet: DataRowOutletDirective;\n    @ViewChild(HeaderRowOutletDirective) _headerRowOutlet: HeaderRowOutletDirective;\n    @ViewChild(FooterRowOutletDirective) _footerRowOutlet: FooterRowOutletDirective;\n\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     */\n    @ContentChildren(SlkColumnDefDirective) _contentColumnDefs: QueryList<SlkColumnDefDirective>;\n\n    /** Set of data row definitions that were provided to the table as content children. */\n    @ContentChildren(SlkRowDefDirective) _contentRowDefs: QueryList<SlkRowDefDirective<T>>;\n\n    /** Set of header row definitions that were provided to the table as content children. */\n    @ContentChildren(SlkHeaderRowDefDirective) _contentHeaderRowDefs: QueryList<SlkHeaderRowDefDirective>;\n\n    /** Set of footer row definitions that were provided to the table as content children. */\n    @ContentChildren(SlkFooterRowDefDirective) _contentFooterRowDefs: QueryList<SlkFooterRowDefDirective>;\n\n    /** Set class for the host element */\n    @HostBinding('class') class = 'table-slk-grid';\n\n    constructor(\n        protected readonly _differs: IterableDiffers,\n        protected readonly _changeDetectorRef: ChangeDetectorRef,\n        protected readonly _elementRef: ElementRef,\n        private renderer: Renderer2\n    ) {\n        // this.renderer.setStyle(_elementRef.nativeElement, 'overflow', 'auto');\n    }\n\n    ngOnInit() {\n        if (this._elementRef.nativeElement.nodeName === 'TABLE') {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\n            // console.log('_i', _i, dataRow);\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        // console.log('data differ', this._dataDiffer);\n    }\n\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n\n        // add a class to give styling to the host element\n        this.renderer.addClass(this._elementRef.nativeElement, 'slk-grid');\n    }\n\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n\n        // this._cachedRenderRowsMap.clear();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n    }\n\n    /**\n     * Render rows based on the table's latest set of data which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary changes\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        // console.log('renderRows', this._renderRows);\n        // console.log('this._dataDiffer', this._dataDiffer);\n        const changes = this._dataDiffer.diff(this._renderRows);\n        // console.log('changes', changes);\n        if (!changes) { return; }\n\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation(\n            (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number, currentIndex: number) => {\n                // console.log('record', record, prevIndex, currentIndex);\n                if (record.previousIndex === null) {\n                    this._insertRow(record.item, currentIndex);\n                } else if (currentIndex === null) {\n                    viewContainer.remove(prevIndex);\n                } else {\n                    const view = <RowViewRef<T>>viewContainer.get(prevIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n                if (currentIndex === this._data.length - 1) {\n                    this._addScrollEvent();\n                }\n            });\n    }\n\n    private _getAllRenderRows(): RenderRow<T>[] {\n        const renderRows: RenderRow<T>[] = [];\n        // console.log('this_Data', this._data);\n\n        // for each data object, get the list of rows that should be rendered, represented by the\n        // respective 'RenderRow' object which is the pair of data and slkrowDef\n        for (let i = 0; i < this._data.length; i++) {\n            // console.log('this._data i', i);\n            const data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i);\n            // console.log('render rows for data', renderRowsForData);\n\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                const renderRow = renderRowsForData[j];\n                // console.log('j', j, renderRow);\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n\n    /**\n     * Gets a list of 'RenderRow<T>' for the provided data object and any 'CdkRowDef' objects that\n     * should be rendered for this data. Reuses the cached RenderRow objecst if they match the same\n     * (T, SlkRowDef) pair.\n     */\n    private _getRenderRowsForData(\n        data: T, dataIndex: number\n    ): RenderRow<T>[] {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n\n        return rowDefs.map((rowDef: any) => {\n            return { data, rowDef, dataIndex };\n        });\n    }\n\n    /** Update the map containing the content's column definitions. */\n    private _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n\n        columnDefs.forEach(columnDef => {\n            // if (this._columnDefsByName.has(columnDef.name)) {\n            //     throw getTableDuplicateColumnNameError(columnDef.name);\n            // }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n\n    /** Update the list of all available row definitions that can be used. */\n    private _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs =\n            mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        // if (defaultRowDefs.length > 1) {\n        //     throw getTableMultipleDefaultRowDefsError();\n        // }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    private _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\n\n        // console.log('this.-rowDefs', this._rowDefs);\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        this._data = [];\n\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n\n        this._dataSource = dataSource;\n    }\n\n    /** Sets up a subscription for the data provided by the data source. */\n    private _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) { return; }\n\n        let dataStream: Observable<T[]> | undefined;\n        // Check if the datasource is a DataSource object by observing if it has a connect function.\n        // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n        // checked as an instanceof DataSource<T> since the table should allow for data sources\n        // that did not explicitly extend DataSource<T>.\n        if ((this.dataSource as DataSource<T>).connect instanceof Function) {\n            dataStream = (this.dataSource as DataSource<T>).connect(this);\n            // console.log('dataSteam', dataStream);\n        } else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n            // console.log('dataStream1', dataStream);\n        } else if (Array.isArray(this.dataSource)) {\n            dataStream = observableOf(this.dataSource);\n            // console.log('dataStream2', dataStream);\n        }\n\n        // if (dataStream === undefined) {\n        //     throw getTableUnknownDataSourceError();\n        // }\n\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((data: any) => {\n                this._data = data || [];\n                this.copyOfData = this._data.slice();\n                this.renderRows();\n            });\n    }\n\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    private _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    private _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    }\n\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row defintion, it is returned. otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none reutrn true, retun thedefault row\n     * definition\n     */\n    _getRowDefs(data: T, dataIndex: number): SlkRowDefDirective<T>[] {\n        if (this._rowDefs.length === 1) { return [this._rowDefs[0]]; }\n\n        const rowDefs: SlkRowDefDirective<T>[] = [];\n\n        const rowDef =\n            this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n        if (rowDef) {\n            rowDefs.push(rowDef);\n        }\n\n        return rowDefs;\n    }\n\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     */\n    private _insertRow(renderRow: RenderRow<T>, renderIndex: number) {\n        // console.log('render row', renderRow);\n        const rowDef = renderRow.rowDef;\n        const context: SlkCellOutletRowContext<T> = { $implicit: renderRow.data };\n        // console.log('context', context);\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet\n     */\n    private _renderRow(\n        outlet: RowOutlet, rowDef: BaseRowDef, index: number, context: SlkCellOutletRowContext<T> = {}\n    ) {\n        // console.log('outlet', outlet, rowDef, index, context);\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n        for (let _a = 0, _b = this._getCellTemplates(rowDef); _a < _b.length; _a++) {\n            const cellTemplate = _b[_a];\n            // console.log('cell template', SlkCellOutletDirective.mostRecentCellOutlet, cellTemplate);\n            if (SlkCellOutletDirective.mostRecentCellOutlet) {\n                // console.log('create embedded view');\n                SlkCellOutletDirective.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Gets the column definitions for the provided row def. */\n    private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\n        // console.log('row def', rowDef);\n        if (!rowDef || !rowDef.columns) { return []; }\n        // console.log('!rowdef pass', rowDef.columns);\n        return Array.from(rowDef.columns, columnId => {\n            // console.log('columnId', columnId, this._columnDefsByName);\n            const column = this._columnDefsByName.get(columnId);\n            // console.log('column', column);\n\n            // if (!column) {\n            //     throw getTableUnknownColumnError(columnId);\n            // }\n\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n\n    /**\n     * Adds native table sections (e.g tbody) and moves the router outlets into them.\n     */\n    _applyNativeTableSections() {\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet }\n        ];\n        for (let _a = 0, sections_1 = sections; _a < sections_1.length; _a++) {\n            const section = sections_1[_a];\n            const element = document.createElement(section.tag);\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            this._elementRef.nativeElement.appendChild(element);\n        }\n    }\n    /**\n     * TODO: Move this to a new scroll module later.\n     * Adds a scroll event on the grid.\n     */\n    _addScrollEvent(): void {\n        const tbody = document.getElementsByTagName('tbody');\n        tbody[0].addEventListener('scroll', (event: UIEvent) => {\n            // Avoids scroll event to get fired twice.\n            event.stopImmediatePropagation();\n            this.onScroll(event);\n        });\n    }\n    // Later change the logic.\n    onScroll(event: any): void {\n        const tbodyViewHeight = event.target.offsetHeight;\n        const tbodyScrollHeight = event.target.scrollHeight;\n        const scrollLocation = event.target.scrollTop;\n        // If the user has scrolled to the bottom, send signal via output binding.\n        const limit = tbodyScrollHeight - tbodyViewHeight;\n\n        // get total pages.\n        const totalPages = this.length / this._data.length;\n\n        if (scrollLocation === limit) {\n            this.pageIndex++;\n            if (totalPages >= this.pageIndex) {\n                this.scrollToBottom.emit({\n                    pageIndex: this.pageIndex,\n                    totalRows: this._length\n                });\n            } else {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which should be rendered adding/removing row definitions\n     */\n    private _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n}\n\n/** Utility function that gets a merged list of the entries in a QueryList and values of a Set. */\nfunction mergeQueryListAndSet<T>(queryList: QueryList<T>, set: Set<T>): T[] {\n    // console.log('query list', queryList, set);\n    return queryList.toArray().concat(Array.from(set));\n}\n\n\n","import {\n    SlkTableComponent,\n    DataRowOutletDirective,\n    HeaderRowOutletDirective,\n    FooterRowOutletDirective\n} from './grid';\nimport {\n    SlkRowDefDirective,\n    SlkCellOutletDirective,\n    SlkRowComponent,\n    SlkHeaderRowComponent,\n    SlkHeaderRowDefDirective,\n    SlkFooterRowComponent,\n    SlkFooterRowDefDirective\n} from './row';\nimport {\n    SlkCellDefDirective,\n    SlkHeaderCellDefDirective,\n    SlkFooterCellDefDirective,\n    SlkColumnDefDirective,\n    SlkCellDirective,\n    SlkHeaderCellDirective,\n    SlkFooterCellDirective\n} from './cell';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DirectiveService } from './directive-service';\n\nconst EXPORTED_DECLARATIONS = [\n    SlkTableComponent,\n    SlkRowDefDirective,\n    SlkCellDefDirective,\n    SlkCellOutletDirective,\n    SlkHeaderCellDefDirective,\n    SlkFooterCellDefDirective,\n    SlkColumnDefDirective,\n    SlkCellDirective,\n    SlkRowComponent,\n    SlkHeaderCellDirective,\n    SlkFooterCellDirective,\n    SlkHeaderRowComponent,\n    SlkHeaderRowDefDirective,\n    SlkFooterRowComponent,\n    SlkFooterRowDefDirective,\n    DataRowOutletDirective,\n    HeaderRowOutletDirective,\n    FooterRowOutletDirective,\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [DirectiveService]\n})\nexport class SlkGridModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SlkGridModule\n        }\n    }\n}\n","export let _finalDataSet: any[] = [];\n\n// Swap method\nexport function swap(dataSet: any[], left: number, right: number) {\n    // create a temporary reference to swap the object\n    const temp = dataSet[left];\n    dataSet[left] = dataSet[right];\n    dataSet[right] = temp;\n}\n\n// quick sort\nexport function quickSort(dataSet: any[], column: string, low: number, high: number) {\n    let j: number;\n    if (high > low) {\n        j = partition(dataSet, column, low, high);\n        if (low < j - 1) {\n            quickSort(dataSet, column, low, j - 1);\n        }\n        if (j < high) {\n            quickSort(dataSet, column, j, high);\n        }\n        _finalDataSet = dataSet;\n    }\n}\n\n// partition function\nexport function partition(dataSet: any[], column: string, low: number, high: number): number {\n    const pivot = dataSet[Math.floor((low + high) / 2)][column].split('')[0].toLowerCase();\n\n    let i: number = low, j: number = high;\n\n    while (i <= j) {\n        while (dataSet[i][column].split('')[0].toLowerCase() < pivot) {\n            i++;\n        }\n        while (dataSet[j][column].split('')[0].toLowerCase() > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            swap(dataSet, i, j);\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n\n// fast sort for ascending if already data set in descending order\nexport function shellSortAsc(dataSet: any[], column: string) {\n    const length: number = dataSet.length;\n    // calculating the gap\n    let gap: number = Math.floor(length / 2);\n\n    // loop through the array till the gap is less than 0\n    while (gap > 0) {\n        // decoy\n        let j = 0;\n\n        // start the looping at gap and end at length\n        for (let i = gap; i < length; i++) {\n            // store current dataSet value in temp\n            const temp = dataSet[i];\n\n            // j = i;\n            let currentStr;\n            if (i - gap >= 0) {\n                currentStr = dataSet[i - gap][column].split('')[0].toLowerCase();\n            } else {\n                // in comparison will always return false hence skip the loop\n                currentStr = 0;\n            }\n            for (j = i; j >= gap && currentStr > temp[column].split('')[0].toLowerCase(); j -= gap) {\n                dataSet[j] = dataSet[j - gap];\n            }\n\n            // if condition is not met then no change in array\n            dataSet[j] = temp;\n        }\n\n        gap = Math.floor(gap / 2);\n\n    }\n    // console.log('dataset', dataSet);\n    return dataSet;\n}\n\nexport function shellSortDesc(dataSet: any[], column: string) {\n    let i, temp, flag = 1;\n    const numLength = dataSet.length;\n    let d = numLength;\n    while (flag || (d > 1)) { // boolean flag (true when not equal to 0)\n        flag = 0;           // reset flag to 0 to check for future swaps\n        d = Math.floor((d + 1) / 2);\n        for (i = 0; i < (numLength - d); i++) {\n            if (dataSet[i + d][column].split('')[0].toLowerCase() > dataSet[i][column].split('')[0].toLowerCase()) {\n                temp = dataSet[i + d];      // swap positions i+d and i\n                dataSet[i + d] = dataSet[i];\n                dataSet[i] = temp;\n                flag = 1;                  // tells swap has occurred\n            }\n        }\n    }\n    return dataSet;\n}\n","import { DataSource } from '@angular/cdk/table';\nimport {\n    BehaviorSubject,\n    Subscription,\n    Observable,\n    of as observableOf,\n    merge,\n    combineLatest\n} from 'rxjs';\nimport { SlkSortDirective, Sort } from '../sort/sort';\nimport { map } from 'rxjs/operators';\nimport * as methods from './grid-methods';\nimport { PageEvent, SlkPaginatorComponent } from '../paginator';\nimport { SlkGridFilterDirective } from '../grid-filter';\n\nexport class SlkGridDataSource<T> extends DataSource<T> {\n    /** Stream that emits when a new data array is set on the data source. */\n    private readonly _data: BehaviorSubject<T[]>;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    private readonly _renderData = new BehaviorSubject<T[]>([]);\n    /**\n     * Subscription to the changes that should trigger an update to table's rendered row, such\n     * as sorting, pagination or base data changes.\n     */\n    _renderChangesSubscription = Subscription.EMPTY;\n\n    /** Array of data that should be rendered by the table */\n    get data() { return this._data.value; }\n    set data(data: T[]) { this._data.next(data); }\n\n    /**\n     * Instance of the SlkSortDirective used by the table to control its sort\n     */\n    get sort(): SlkSortDirective | null { return this._sort; }\n    set sort(sort: SlkSortDirective | null) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    private _sort: SlkSortDirective | null;\n\n    get paginator(): SlkPaginatorComponent | null { return this._paginator; }\n    set paginator(paginator: SlkPaginatorComponent | null) {\n        // console.log('paginator', paginator);\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    private _paginator: SlkPaginatorComponent | null;\n\n    get filter(): SlkGridFilterDirective | null { return this._filter; }\n    set filter(filter: SlkGridFilterDirective | null) {\n        console.log('filter', filter);\n        this._filter = filter;\n        this._updateChangeSubscription();\n    }\n    private _filter: SlkGridFilterDirective | null;\n\n    /**\n     * Gets a sorted copy of the data array based on the state of the SlkSortDirective.\n     */\n    sortData: (\n        (data: T[], sort: SlkSortDirective, initial: boolean) => T[]\n    ) = (data: T[], sort: SlkSortDirective, initial: boolean): T[] => {\n        const active = sort.active;\n        const direction = sort.direction;\n\n        if (direction === '') { return data; }\n        if (initial) {\n            methods.quickSort(data, active, 0, data.length - 1);\n            data = methods._finalDataSet;\n            return data;\n        }\n\n        switch (direction) {\n            case 'asc':\n                return methods.shellSortAsc(data, active);\n            case 'desc':\n                return methods.shellSortDesc(data, active);\n            default: return data;\n        }\n    }\n\n    constructor(initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Subscribe to changes that should trigger an update to the table's rendered rows. */\n    _updateChangeSubscription() {\n        const sortChange: Observable<Sort | null> = this._sort ?\n            merge<Sort>(this._sort.slkSortChange, this._sort.initialised) :\n            observableOf(null);\n        const pageChange: Observable<PageEvent | null> = this._paginator ?\n            merge<PageEvent>(this._paginator.page, this._paginator.initialised) :\n            observableOf(null);\n        const filterChange: Observable<any | null> = this._filter ?\n            merge<any>(this._filter.slkFilterChange, this._filter.initialised) :\n            observableOf(null);\n\n\n        const dataStream = this._data;\n        // Watch for sort changes to provide ordered data\n        const orderedData = combineLatest(dataStream, sortChange)\n            .pipe(map(([data]) => this._orderData(data)));\n        const paginatedData = combineLatest(orderedData, pageChange)\n            .pipe(map(([data]) => this._pageData(data)));\n        const filteredData = combineLatest(paginatedData, filterChange)\n            .pipe(map(([data]) => this._filterData(data)));\n\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = filteredData.subscribe(data => this._renderData.next(data));\n    }\n\n    /**\n     * Returns a sorted copy of the data if SlkSortDirective has a sort applied, otherwise just returns the\n     * data array as provided.\n     */\n    _orderData(data: T[]): T[] {\n        // If there is no active sort or direction then return data.\n        if (!this.sort) { return data; }\n        return this.sortData(data.slice(), this.sort, false);\n    }\n    /**\n    * Returns a paged splice of the provided array according to the SlkPaginatorComponent's page\n    * index and length;\n    */\n    _pageData(data: T[]): T[] {\n        if (!this.paginator) { return data; }\n        const startIndex = (this.paginator.pageIndex - 1) * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    }\n\n    _filterData(data: T[]): T[] {\n        if (!this.filter) { return data; }\n\n        // Write following lines in separate function.\n        // Takes the new filtered array.\n        const filteredDataArray: any[] = [];\n\n        if (this._filter.active) {\n            console.log('1', this._filter.selectedOptions);\n\n            const key = this._filter.key ? this._filter.key : this._filter.active;\n\n            for (let i = 0; i < data.length; i++) {\n                for (let j = 0; j < this._filter.selectedOptions.length; j++) {\n                    if (data[i][key] === this._filter.selectedOptions[j]) {\n                        console.log('enter');\n                        filteredDataArray.push(data[i]);\n                    }\n                }\n            }\n            console.log('filteredDataArray', filteredDataArray);\n\n            return filteredDataArray;\n        } else {\n            return data;\n        }\n    }\n\n    /** Used by the SlkTable. Called when it connects to the data source. */\n    connect() { return this._renderData; }\n    /** Used by SlkTable, Called when it is destroyed. */\n    disconnect() { }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class SortDirectiveService {\n    private direction = new BehaviorSubject<string>('');\n    finalDir: Observable<string> = this.direction.asObservable();\n    catchFinalDir(dir: string) {\n        this.direction.next(dir);\n    }\n}\n","import { SortDirection } from './sort-header';\nimport {\n    Directive,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Input,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\nimport { SortDirectiveService } from './sort-directive.service';\n\n/** Interface for directive that holds sorting state consumed by SlkSortHeader */\nexport interface SlkSortable {\n    /** The id of the column being sorted. */\n    id: string;\n    /** Sort direction. */\n    start: 'asc' | 'desc';\n}\n\n/** Current sort state. */\nexport interface Sort {\n    /** The id of the column being sorted. */\n    active: string;\n    /** The Sort Direction */\n    direction: SortDirection;\n    initial: boolean;\n}\n\n/** Container for SlkSortables to manage the sort state and provide default sort paramters. */\n@Directive({\n    selector: '[slkSort]',\n    exportAs: 'slkSort'\n})\nexport class SlkSortDirective implements OnChanges, OnDestroy, OnInit {\n    /** Collection of all registered sortables that this directive manages. */\n    sortables = new Map<string, SlkSortable>();\n    /** Used to notify any child components listening to state changes. */\n    readonly _stateChanges = new Subject<void>();\n    /** Emit initialised value when directive is initialised. */\n    initialised = new BehaviorSubject<boolean>(false);\n\n    /** The id of the most recently sorted SlkSortable. */\n    @Input('slkSortActive') active: string;\n    /**\n     * The direction to set when an SlkSortable is initially sorted.\n     */\n    @Input('slkSortStart') start: 'asc' | 'desc' = 'asc';\n    /** The sort direction of the currently active SlkSortable. */\n    @Input('slkSortDirection')\n    get direction(): SortDirection { return this._direction; }\n    set direction(direction: SortDirection) {\n        this._direction = direction;\n    }\n    private _direction: SortDirection = '';\n    /** Event emiited when the user changes either the active sort or sort direction. */\n    @Output('slkSortChange') readonly slkSortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n    constructor(private sortDirService: SortDirectiveService) { }\n    /**\n     * Register function to be used by the contained SlkSortables. Adds the SlkSortable to\n     * the collection of SlkSortables.\n     */\n    register(sortable: SlkSortable): void {\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the container SlkSortables. Removes the SlkSortable from\n     * the collection of contained SlkSortables.\n     */\n    deregister(sortable: SlkSortable): void {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable: SlkSortable): void {\n        let initial = true;\n        if (this.active !== sortable.id) {\n            initial = false;\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        } else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortDirService.catchFinalDir(this.direction);\n        this.slkSortChange.emit({\n            active: this.active,\n            direction: this.direction,\n            initial: initial\n        });\n    }\n    /** Returns the next sort direction of the active sortable. */\n    getNextSortDirection(sortable: SlkSortable): SortDirection {\n        // Get the sort direction cycle.\n        const sortDirectionCycle = getSortDirectionCycle(sortable.start);\n        // Get and return the next direction in the cycle.\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this.initialised.next(true);\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this.initialised.complete();\n    }\n}\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc'): SortDirection[] {\n    const sortOrder: SortDirection[] = ['asc', 'desc'];\n    if (start === 'desc') { sortOrder.reverse(); }\n    return sortOrder;\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    OnDestroy,\n    OnInit,\n    Input,\n    Optional,\n    Renderer2\n} from '@angular/core';\nimport { SlkColumnDefDirective } from '../grid';\nimport { SlkSortDirective } from './sort';\nimport { take } from 'rxjs/operators';\nimport { SortDirectiveService } from './sort-directive.service';\nimport { ViewChild } from '@angular/core';\nimport { ElementRef } from '@angular/core';\n\nexport type SortDirection = 'asc' | 'desc' | '';\n\n@Component({\n    selector: '[slk-sort-header]',\n    exportAs: 'sortHeader',\n    template: `\n      <div class=\"slk-sort-header-container\">\n\n          <button (click)=\"onSort()\" class=\"slk-sort-header-button\" type=\"button\"> \n\n              <ng-content></ng-content>\n\n              <div class=\"slk-sort-header-pointer\">\n                  <div #sortBtn class=\"slk-sort-header-pointer-design\">\n                \n                  </div>\n              </div>\n          </button>\n\n          <div class=\"filter-header-wrapper\">\n              <ng-content select=\"slk-filter-header\"></ng-content>\n          </div>\n    \n      </div>\n    `,\n    styles: [`\n      .slk-sort-header-container{display:flex;cursor:pointer;align-items:center}.slk-sort-header-disabled .slk-sort-header-container{cursor:default}.slk-sort-header-button{margin:auto!important;border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.slk-sort-header-pointer{height:12px;width:12px;position:relative;display:flex}.slk-sort-header-pointer-down{border-top:5px solid #555}.slk-sort-header-pointer-down,.slk-sort-header-pointer-up{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;margin:auto;display:flex;align-items:center}.slk-sort-header-pointer-up{border-bottom:5px solid #000}.sort-header-wrapper{align-content:center}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkSortHeaderComponent implements OnDestroy, OnInit {\n    /** The direction the pointer should face as per sorted direction */\n    pointerDirection: SortDirection;\n\n    /** ID of the sort-header. When used with slkColumnDef, will default to column's name. */\n    @Input('slk-sort-header') id: string;\n    /** Overrides the sort start value of the containing SlkSort for this SlkSortable. */\n    @Input() start: 'asc' | 'desc';\n\n    @ViewChild('sortBtn') sortBtn: ElementRef;\n\n    constructor(\n        // changeDetectorRef: ChangeDetectorRef,\n        @Optional() public _sort: SlkSortDirective,\n        @Optional() public _slkColumnDef: SlkColumnDefDirective,\n        private renderer: Renderer2,\n        private sortDirService: SortDirectiveService\n    ) { }\n\n    /** Click event. When clicked will sort the data passing reference of this component to sort directive. */\n    onSort() {\n        this._sort.sort(this);\n\n        this.sortDirService.finalDir\n            .pipe(take(1))\n            .subscribe((direction) => {\n                switch (direction) {\n                    case 'asc':\n                        this.renderer.removeClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-down');\n                        this.renderer.addClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-up');\n                        return;\n                    case 'desc':\n                        this.renderer.removeClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-up');\n                        this.renderer.addClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-down');\n                        return;\n                    default:\n                        this.renderer.addClass(this.sortBtn.nativeElement, 'slk-sort-header-pointer-down');\n                        return;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (!this.id && this._slkColumnDef) {\n            this.id = this._slkColumnDef.name;\n        }\n        this._sort.register(this);\n    }\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        // this._rerenderSubscription.unsubscribe();\n    }\n\n    /** Returns the animation state for the arrow direction. */\n    _isSorted() {\n        return this._sort.active === this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkSortDirective } from './sort';\nimport { SlkSortHeaderComponent } from './sort-header';\nimport { SortDirectiveService } from './sort-directive.service';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [SlkSortDirective, SlkSortHeaderComponent],\n    declarations: [SlkSortDirective, SlkSortHeaderComponent],\n    providers: [SortDirectiveService]\n})\n\nexport class SlkSortModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SlkSortModule\n        };\n    }\n}\n","import {\n    Directive,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\n\nexport class SlkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n    /** Depth of the node. */\n    level: number;\n    /** Index location of node. */\n    index?: number;\n    /** Length of the number of total dataNodes */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node defintion for the SlkTreeComponent.\n * Captures the node's template\n */\n@Directive({\n    selector: '[slkTreeNodeDef]',\n    inputs: [\n        'when: slkTreeNodeDefWhen'\n    ]\n})\nexport class SlkTreeNodeDefDirective<T> {\n\n    when: (index: number, nodeData: T) => boolean;\n\n    constructor(\n        public template: TemplateRef<any>,\n        public viewContainer: ViewContainerRef\n    ) { }\n}\n\n","import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[slkTreeNodeOutlet]'\n})\nexport class SlkTreeNodeOutletDirective {\n    constructor(public viewContainer: ViewContainerRef) { }\n}\n","import {\n    Directive,\n    ViewContainerRef,\n    Input,\n    ElementRef,\n    Renderer2,\n    HostListener\n} from '@angular/core';\n\n@Directive({ selector: '[slkTreeTextOutlet]' })\nexport class SlkTreeTextOutletDirective<T> {\n    static mostRecentTreeTextOutlet: SlkTreeTextOutletDirective<{}> | null = null;\n\n    get data(): T { return this._data; }\n    set data(value: T) {\n        this._data = value;\n    }\n    protected _data: T;\n\n    get context(): any { return this._context; }\n    set context(value: any) {\n        this._context = value;\n    }\n    protected _context: any;\n\n    constructor() {\n        SlkTreeTextOutletDirective.mostRecentTreeTextOutlet = this as SlkTreeTextOutletDirective<T>;\n    }\n}\n\n\n@Directive({\n    selector: '[slkAction]',\n    // exportAs: 'slkAction'\n})\nexport class SlkTreeActionDirective {\n    @Input() on: boolean;\n    constructor(\n        public viewContainer: ViewContainerRef,\n        public elementRef: ElementRef,\n        public renderer: Renderer2\n    ) {\n        renderer.setStyle(elementRef.nativeElement, 'backgroundColor', '#e2e0e0');\n    }\n\n    @HostListener('mouseover') onMouseOver() {\n        const el = this.elementRef.nativeElement.querySelector('.actions');\n        this.renderer.setStyle(el, 'visibility', 'visible');\n    }\n    @HostListener('mouseout') onMouseOut() {\n        const el = this.elementRef.nativeElement.querySelector('.actions');\n        this.renderer.setStyle(el, 'visibility', 'hidden');\n    }\n}\n\n","import {\n    Directive,\n    OnDestroy,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { SlkTreeComponent } from './tree';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Tree node for SlkTreeComponent.\n */\n@Directive({\n    selector: 'slk-tree-node',\n    exportAs: 'slkTreeNode'\n})\nexport class SlkTreeNodeDirective<T> implements OnDestroy {\n    /**\n     * The most recently created SlkTreeNode. We save it in static variable so we can retreive it\n     * in 'SlkTreeComponent' and set the data to it.\n     */\n    static mostRecentTreeNode: SlkTreeNodeDirective<{}> | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    protected _destroyed = new Subject<void>();\n\n    /** The tree node's data. */\n    get data(): T { return this._data; }\n    set data(value: T) {\n        // console.log('value', value);\n        this._data = value;\n        this._setRoleFromData();\n    }\n    protected _data: T;\n\n    get isExpanded(): boolean {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    /**\n     * The role of the node should be group if its an internal node\n     * and treeitem if its a leaf node.\n     */\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _tree: SlkTreeComponent<T>\n    ) {\n        SlkTreeNodeDirective.mostRecentTreeNode = this as SlkTreeNodeDirective<T>;\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    private _setRoleFromData(): void {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        } else {\n            if (!this._tree.treeControl.getChildren) { }\n            this._tree.treeControl.getChildren(this._data).pipe(takeUntil(this._destroyed))\n                .subscribe((children: T[]) => {\n                    this.role = children && children.length ? 'group' : 'treeitem';\n                });\n        }\n    }\n}\n","import {\n    OnDestroy,\n    Input,\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    AfterContentChecked,\n    OnInit,\n    IterableDiffer,\n    TrackByFunction,\n    ViewChild,\n    ContentChildren,\n    IterableDiffers,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    IterableChangeRecord,\n    QueryList,\n    HostBinding,\n    EmbeddedViewRef,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { Subject, Observable, of as observableOf, Subscription, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { SlkTreeNodeDefDirective, SlkTreeNodeOutletContext } from './node';\nimport { SlkTreeNodeOutletDirective } from './outlet';\nimport { TreeControl } from './control/tree-control';\nimport { SlkTreeTextOutletDirective } from './tree-nest-outlet';\nimport { SlkTreeNodeDirective } from './node-directive';\n\n\n/**\n * Slk tree component that connects with a data source to retrieve data of type T and\n * renders dataNodes with heirarchy.\n */\n@Component({\n    selector: 'slk-tree',\n    exportAs: 'slkTree',\n    template: '<ng-container slkTreeNodeOutlet></ng-container>',\n    styles: [`\n      .tree-node-wrapper{cursor:pointer;position:relative;margin-top:20px;width:100%;height:35px;border:1px solid #e2e0e0}.actions{width:70px;position:absolute;display:flex;flex-direction:row;justify-content:space-between;bottom:0;right:0;padding-bottom:20px;padding-right:20px}.icon-plus:after{width:8px;height:2px;top:7px;left:4px}.icon-plus:after,.icon-plus:before{flex:1;background-color:#7e3232;border-radius:1px;-webkit-border-radius:1px;-moz-border-radius:1px;position:absolute;content:\"\"}.icon-plus:before{width:2px;height:8px;top:4px;left:7px}.edit.icon{flex:1;color:#000;position:absolute;margin-left:4px;margin-top:7px;width:14px;height:2px;border-radius:1px;border:1px solid #7e3232;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.edit.icon:before{flex:1;content:\"\";position:absolute;left:-12px;top:-1px;width:0;height:0;border-left:5px solid transparent;border-right:5px solid currentColor;border-top:2px solid transparent;border-bottom:2px solid transparent}.trash.icon{flex:1;color:#000;position:absolute;margin-left:5px;margin-top:7px;width:9px;height:10px;border-left:1px solid #7e3232;border-right:1px solid #7e3232;border-bottom:1px solid #7e3232;border-radius:0 0 2px 2px}.trash.icon:before{flex:1;content:\"\";position:absolute;left:-4px;top:-2px;width:17px;height:1px;background-color:#7e3232}.trash.icon:after{flex:1;content:\"\";position:absolute;left:0;top:-5px;width:7px;height:2px;border-left:1px solid currentColor;border-right:1px solid currentColor;border-top:1px solid currentColor;border-radius:4px 4px 0 0}.toggle{float:left;padding-top:15px;margin-right:10px}.toggle-wrapper{border:solid #000;border-width:0 3px 3px 0;display:inline-block;padding:3px}.expand{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.collapse{transform:rotate(45deg);-webkit-transform:rotate(45deg)}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkTreeComponent<T> implements\n    AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n\n    /** Subject that emits when the component has been destroyed. */\n    private _onDestroy = new Subject<void>();\n    /** Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<T>;\n    /** Stores the node definition that does not have a when predicate. */\n    public _defaultNodeDef: SlkTreeNodeDefDirective<T> | null;\n    /** Data subscription */\n    private _dataSubscription: Subscription | null;\n    /** Level of nodes */\n    private _levels: Map<T, number> = new Map<T, number>();\n\n    // public viewRef: ViewRef;\n    public embeddedViewRef: EmbeddedViewRef<any>;\n    public cacheEmbeddedViewRef: EmbeddedViewRef<any>[] = [];\n\n    public viewContainerRef: Array<any> = [];\n\n    @HostBinding('class') class = 'slk-tree';\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced\n     * by the tree's stream of view window.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        // console.log('dataSource', dataSource);\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n    /** the tree controller. */\n    @Input() treeControl: TreeControl<T>;\n    /**\n     * Tracking function will be used to check differences in data changes.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    /** Sends the re-ordered array on drop. */\n    @Output('reorderData') reorderData: EventEmitter<any> = new EventEmitter();\n\n    // @ViewChildren(SlkNestedTreeNodeDirective) public nestedTreeNode: SlkNestedTreeNodeDirective<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(SlkTreeNodeOutletDirective) _nodeOutlet: SlkTreeNodeOutletDirective;\n    /** The tree node template for the tree. */\n    @ContentChildren(SlkTreeNodeDefDirective) _nodeDefs: QueryList<SlkTreeNodeDefDirective<T>>;\n    /** Stream containing the latest info on what rows are being displayed on screen. */\n    viewChange = new BehaviorSubject<{ start: number, end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    constructor(\n        private _differs: IterableDiffers,\n        private _changeDetectorRef: ChangeDetectorRef,\n    ) { }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    }\n\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        // console.log('defaultnodedef', defaultNodeDefs);\n\n        this._defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            // console.log('enter');\n            this._observeRenderChanges();\n        }\n    }\n\n    private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private _observeRenderChanges() {\n        let dataStream: Observable<T[]> | undefined;\n\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n        // console.log('dataStream', dataStream);\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this._renderNodeChanges(data));\n        }\n    }\n\n    /** Check for changes made in the data nd render each change. */\n    _renderNodeChanges(data: T[], dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n        parentData?: T) {\n\n        const changes = dataDiffer.diff(data);\n        // console.log('changes', changes);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation(\n            (item: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\n                // console.log('tes', item, adjustedPreviousIndex, currentIndex);\n                // console.log('currentIndex', currentIndex);\n                if (item.previousIndex === null) {\n                    this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n                } else if (currentIndex === null) {\n                    viewContainer.remove(adjustedPreviousIndex);\n                } else {\n                    const view = viewContainer.get(adjustedPreviousIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * finds the matchin node defintion that should be used for this node data\n     */\n    _getNodeDef(data: T, i: number): SlkTreeNodeDefDirective<T> {\n        if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this._getNodeDef(nodeData, index);\n\n        /** Gets all the view container ref to check the index of view ref for drag and drop. */\n        this.viewContainerRef.push(viewContainer);\n\n        // Node context that will be provided to created embedded view\n        const context = new SlkTreeNodeOutletContext<T>(nodeData);\n\n        // If tree is flat tree, then use the getLevel function in flat tree control\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this._levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node;s nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n\n        /** Returns a view ref and store it in property. */\n        this.embeddedViewRef = container.createEmbeddedView(node.template, context, index);\n\n        /** Gets all the view ref to check with the view container ref for drag and drop. */\n        this.cacheEmbeddedViewRef.push(this.embeddedViewRef);\n\n        if (SlkTreeNodeDirective.mostRecentTreeNode) {\n            SlkTreeNodeDirective.mostRecentTreeNode.data = nodeData;\n        }\n        if (SlkTreeTextOutletDirective.mostRecentTreeTextOutlet) {\n            SlkTreeTextOutletDirective.mostRecentTreeTextOutlet.data = nodeData;\n            SlkTreeTextOutletDirective.mostRecentTreeTextOutlet.context = this.embeddedViewRef.context;\n        }\n    }\n\n    /** Emits a event for re ordered data. */\n    public reorderedData(data: any[]) {\n        this.reorderData.emit(data);\n    }\n}\n\n\n","import { Injectable } from '@angular/core';\nimport {\n    BehaviorSubject,\n    Observable,\n    Subject,\n    of as observableOf\n} from 'rxjs';\n\nexport interface CacheContent {\n    expiry?: number;\n    data: any;\n}\n\nexport const viewRefKey = 'view-ref';\nexport const viewRefContainer = 'view-ref-container';\n\nexport const dataNode = 'dataNode';\n\n@Injectable()\nexport class ActionsService {\n    private cache: Map<string, CacheContent> = new Map<string, CacheContent>();\n    private inFlightObseravbles: Map<string, Subject<any>> = new Map<string, Subject<any>>();\n    readonly DEFAULT_MAX_AGE: number = 300000;\n\n    private addAction = new BehaviorSubject<any>(false);\n\n    onAdd: Observable<any> = this.addAction.asObservable();\n    onActChange(changes: any) {\n        this.addAction.next(changes);\n    }\n\n    /**\n     * This method is an observables based in-memory cache implementation\n     * Keeps track of in flight observablesand sets a default expory for cached values\n     */\n    /**\n     * Gets the value from the cache if the key is provided.\n     * If no value exists in cache, then chcek if the call exists\n     * in flight, if so return the subejct, If not create a new\n     * Subject inFlightObservble and return the source obseravble.\n     */\n    get(key: string, fallback?: Observable<any>, maxAge?: number): Observable<any> | Subject<any> {\n        if (this.hasValidCachedValue(key)) {\n            return observableOf(this.cache.get(key).data);\n        }\n\n        if (!maxAge) {\n            maxAge = this.DEFAULT_MAX_AGE;\n        }\n\n        if (this.inFlightObseravbles.has(key)) {\n            return this.inFlightObseravbles.get(key);\n        } else {\n            return Observable.throw('Requested key is not available in the Cache');\n        }\n    }\n\n    set(key: string, value: any, maxAge: number = this.DEFAULT_MAX_AGE): void {\n        this.cache.set(key, { data: value, expiry: Date.now() + maxAge });\n        this.notifyInFlightObservers(key, value);\n    }\n    /**\n     * Checks if the key exists in cache\n     */\n    has(key: string): boolean {\n        return this.cache.has(key);\n    }\n    /**\n     * Publishes the value to all observers of the given\n     * in progress observables if observers exist.\n     */\n    private notifyInFlightObservers(key: string, value: any): void {\n        if (this.inFlightObseravbles.has(key)) {\n            const inFlight = this.inFlightObseravbles.get(key);\n            const observersCount = inFlight.observers.length;\n            if (observersCount) {\n                inFlight.next(value);\n            }\n            inFlight.complete();\n            this.inFlightObseravbles.delete(key);\n        }\n    }\n    /**\n     * Checks if key exists and has not expired\n     */\n    private hasValidCachedValue(key: string): boolean {\n        if (this.cache.has(key)) {\n            if (this.cache.get(key).expiry < Date.now()) {\n                this.cache.delete(key);\n                return false;\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n}\n","import {\n    Directive,\n    AfterContentInit,\n    OnDestroy,\n    IterableDiffer,\n    ContentChildren,\n    ElementRef,\n    IterableDiffers,\n    QueryList,\n    Renderer2,\n    EventEmitter,\n    ViewContainerRef,\n    OnInit,\n    HostListener,\n    Optional,\n    EmbeddedViewRef,\n} from '@angular/core';\nimport {\n    SlkTreeComponent\n} from './tree';\n\nimport { takeUntil } from 'rxjs/operators';\nimport { SlkTreeNodeOutletDirective } from './outlet';\nimport { ActionsService, viewRefKey, viewRefContainer } from './tree-service';\nimport { Observable } from 'rxjs';\nimport { SlkTreeNodeDirective } from './node-directive';\n\n@Directive({\n    selector: 'slk-nested-tree-node',\n    exportAs: 'slkNestedTreeNode',\n    providers: [\n        { provide: SlkTreeNodeDirective, useExisting: SlkNestedTreeNodeDirective },\n    ]\n})\nexport class SlkNestedTreeNodeDirective<T>\n    extends SlkTreeNodeDirective<T>\n    implements OnInit, AfterContentInit, AfterContentInit, OnDestroy {\n    /** Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<T>;\n    /** The children data dataNodes of current node. they will be placed in SlkTreeNodeOutletDirective */\n    protected _children: T[];\n\n    public addEvent: EventEmitter<any>;\n\n    public cachedData: Observable<any>;\n\n    /** Embedded view ref to be dropped in the container. */\n    _droppedViewRef: EmbeddedViewRef<any>;\n\n    /** The children node placeholder. */\n    @ContentChildren(SlkTreeNodeOutletDirective) nodeOutlet: QueryList<SlkTreeNodeOutletDirective>;\n\n    @HostListener('drop', ['$event'])\n    public drop(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        /** after drop event is fired get a reference of parent view container ref and its data */\n        const nodeContext = JSON.parse(event.dataTransfer.getData('nodeContext'));\n\n        /** Embeds the view when dropped to the dropped view container ref. */\n        this._embedView(nodeContext, this._viewContainer.injector);\n\n        /** Removes the dragged view ref from view container ref */\n        // this._removeView();\n    }\n\n    @HostListener('dragover', ['$event'])\n    public onDragOver(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _tree: SlkTreeComponent<T>,\n        protected _differs: IterableDiffers,\n        public _viewContainer: ViewContainerRef,\n        private renderer: Renderer2,\n        @Optional() private actionService: ActionsService\n    ) {\n        super(_elementRef, _tree);\n    }\n\n    ngOnInit() {\n        this.renderer.setStyle(this._elementRef.nativeElement, 'display', 'block');\n        this.renderer.setStyle(this._elementRef.nativeElement, 'padding-left', '40px');\n    }\n\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        // data coming from the parent class as mostRecentDataNode\n        this._tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((result: any) => {\n                // console.log('result', result);\n                this._children = result;\n                this.updateChildrenNodes();\n            });\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe((_) => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n\n        if (this.nodeOutlet.length && this._children) {\n            const viewContainer = this.nodeOutlet.first.viewContainer;\n            this._tree._renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        } else {\n            // Reset the data differ if theres no children nodes displated\n            this._dataDiffer.diff([]);\n        }\n    }\n\n    /** Embeds a view at the drop point */\n    protected _embbedView(context: any): void {\n        this._viewContainer.createEmbeddedView(this._tree._defaultNodeDef.template, context);\n        SlkTreeNodeDirective.mostRecentTreeNode.data = context.$implicit;\n    }\n\n    /** Embeds a view at the drop point */\n    protected _embedView(context: any, containerRef: any): void {\n        /** Finds the dropped container view ref from the collected embedded view ref. */\n        let containerRefToEmbed: any;\n        for (let i = 0; i < this._tree.viewContainerRef.length; i++) {\n            // Check for the embedded view ref inside the array to match with context\n            for (let j = 0; j < this._tree.viewContainerRef[i]._embeddedViews.length; j++) {\n                // test purpose remove it later\n                if (this._tree.viewContainerRef[i]._embeddedViews[j].context ===\n                    containerRef.view.context) {\n                    containerRefToEmbed = this._tree.viewContainerRef[i];\n                    break;\n                }\n            }\n        }\n        /** Finds the dropped view ref. */\n        let droppedViewRef: EmbeddedViewRef<any>;\n        for (let i = 0; i < this._tree.cacheEmbeddedViewRef.length; i++) {\n            if (this._tree.cacheEmbeddedViewRef[i].context === containerRef.view.context) {\n                droppedViewRef = this._tree.cacheEmbeddedViewRef[i];\n            }\n        }\n        /** Gets the view ref of the dragged object. */\n        this.actionService.get(viewRefKey)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((_viewRef: EmbeddedViewRef<any>) => {\n                // Get index of dropped view ref\n                const index = containerRefToEmbed.indexOf(droppedViewRef);\n                /** Moves the view ref into the view container ref of drop point. */\n                containerRefToEmbed.move(_viewRef, index);\n                /** Emits a event for re ordered data. */\n                this.reorderData(containerRefToEmbed._embeddedViews);\n            });\n    }\n\n    /** Removes the view from the drag point */\n    protected _removeView(): void {\n        // let currentViewRef: EmbeddedViewRef<any>,\n        let currentViewContainerRef: ViewContainerRef;\n        this.actionService.get(viewRefContainer)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((_viewContainerRef: ViewContainerRef) => {\n                currentViewContainerRef = _viewContainerRef;\n                const index = currentViewContainerRef.indexOf(this._droppedViewRef);\n                currentViewContainerRef.remove(index);\n            });\n    }\n\n    /** Sends data back to the user to re order the data. */\n    private reorderData(viewRef: EmbeddedViewRef<any>[]) {\n        const _reorderData = [];\n        for (let i = 0; i < viewRef.length; i++) {\n            _reorderData.push(viewRef[i].context.$implicit);\n        }\n        /** Sends a signal to tree component re order data method. */\n        this._tree.reorderedData(_reorderData);\n    }\n\n    /** Clear the children dataNodes */\n    protected _clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n}\n","import { TreeControl } from './tree-control';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable } from 'rxjs';\n\n\n\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n    /** Saved data node for expandAll action. */\n    dataNodes: T[];\n    /** A Selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n    /** Get depth of a given data node, return the level number. this is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     */\n    isExpandable: (dataNode: T) => boolean;\n    /** Get a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n    /** Toggles one single data node;s expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        this.expansionModel.toggle(dataNode);\n    }\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        this.expansionModel.select(dataNode);\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        this.expansionModel.deselect(dataNode);\n    }\n    /** Whether a given data node is expanded or not. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /** Toggles a subtree rooted at node recursively */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n    /** Gets a list of descendant data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n\n}\n","import { BaseTreeControl } from './base-tree-control';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /** Expands all dataNodes in the tree. */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n    /** Get a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants: T[] = [];\n        this._getDescendants(descendants, dataNode);\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    protected _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n        this.getChildren(dataNode).pipe(take(1)).subscribe(children => {\n            if (children && children.length > 0) {\n                children.forEach((child: T) => this._getDescendants(descendants, child));\n            }\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnInit,\n    Renderer2,\n    Directive,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    OnDestroy,\n    EmbeddedViewRef,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ActionsService, viewRefKey, viewRefContainer, dataNode } from './tree-service';\nimport { takeUntil } from 'rxjs/operators';\nimport { SlkTreeTextOutletDirective } from './tree-nest-outlet';\nimport { SlkNestedTreeNodeDirective } from './nested-node';\nimport { NestedTreeControl } from './control';\nimport { SlkTreeComponent } from './tree';\n\nexport class SlkContentActionContext {\n    public $implicit: any = null;\n    public appContentAction: any = null;\n}\n\n\n@Component({\n    selector: 'slk-tree-nest-text',\n    template: `\n      <div class=\"tree-node-wrapper\" appAction draggable=\"true\" (dragstart)=\"drag($event)\">\n\n          <div class=\"toggle\" (click)=\"onToggle()\">\n\n              <i [ngClass]=\"{'expand' : expand, 'toggle-wrapper' : expand}\"></i>\n\n              <i [ngClass]=\"{'collapse' : collapse, 'toggle-wrapper' : collapse}\"></i>\n\n          </div>\n\n          <!-- <ng-container *appContentAction=\"isAction; else noAction\"> -->\n          <!-- <input type=\"text\"> -->\n          <!-- </ng-container> -->\n\n          <!-- <ng-template #noAction> -->\n          <ng-content></ng-content>\n          <!-- </ng-template> -->\n\n          <div class=\"actions\" [style.visibility]=\"'hidden'\">\n\n              <div (click)=\"onAdd()\">\n                  <div class=\"icon icon-plus\"></div>\n              </div>\n\n              <div (click)=\"onDestroy()\">\n                  <div class=\"trash icon\"></div>\n              </div>\n\n              <div (click)=\"onEdit()\">\n                  <div class=\"edit icon\"></div>\n              </div>\n\n          </div>\n\n      </div>\n    `,\n    // template: ` <ng-container [ngTemplateOutlet]=\"template\"></ng-container>`,\n    // take the reference of child and pass it to ng-container\n    styles: [`\n      .tree-node-wrapper{cursor:pointer;position:relative;margin-top:20px;width:100%;height:35px;border:1px solid #e2e0e0}.actions{width:70px;position:absolute;display:flex;flex-direction:row;justify-content:space-between;bottom:0;right:0;padding-bottom:20px;padding-right:20px}.icon-plus:after{width:8px;height:2px;top:7px;left:4px}.icon-plus:after,.icon-plus:before{flex:1;background-color:#7e3232;border-radius:1px;-webkit-border-radius:1px;-moz-border-radius:1px;position:absolute;content:\"\"}.icon-plus:before{width:2px;height:8px;top:4px;left:7px}.edit.icon{flex:1;color:#000;position:absolute;margin-left:4px;margin-top:7px;width:14px;height:2px;border-radius:1px;border:1px solid #7e3232;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.edit.icon:before{flex:1;content:\"\";position:absolute;left:-12px;top:-1px;width:0;height:0;border-left:5px solid transparent;border-right:5px solid currentColor;border-top:2px solid transparent;border-bottom:2px solid transparent}.trash.icon{flex:1;color:#000;position:absolute;margin-left:5px;margin-top:7px;width:9px;height:10px;border-left:1px solid #7e3232;border-right:1px solid #7e3232;border-bottom:1px solid #7e3232;border-radius:0 0 2px 2px}.trash.icon:before{flex:1;content:\"\";position:absolute;left:-4px;top:-2px;width:17px;height:1px;background-color:#7e3232}.trash.icon:after{flex:1;content:\"\";position:absolute;left:0;top:-5px;width:7px;height:2px;border-left:1px solid currentColor;border-right:1px solid currentColor;border-top:1px solid currentColor;border-radius:4px 4px 0 0}.toggle{float:left;padding-top:15px;margin-right:10px}.toggle-wrapper{border:solid #000;border-width:0 3px 3px 0;display:inline-block;padding:3px}.expand{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.collapse{transform:rotate(45deg);-webkit-transform:rotate(45deg)}\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class SlkTreeNodeTextComponent<T>\n    extends SlkTreeTextOutletDirective<T>\n    implements OnInit, OnDestroy {\n    private _onDestroy: Subject<boolean> = new Subject();\n    isAction = false;\n\n    nestedTreeControl: NestedTreeControl<T>;\n\n    nodeMap = new Map<any, any>();\n\n    isExpandable = (node: any) => node.expandable;\n\n    expand: boolean;\n    collapse = false;\n\n    constructor(\n        private actionService: ActionsService,\n        public nestedNode: SlkNestedTreeNodeDirective<T>,\n        private treeComponent: SlkTreeComponent<T>,\n    ) {\n        super();\n\n        this.nestedTreeControl = new NestedTreeControl<any>(this.isExpandable);\n    }\n\n    ngOnInit() {\n        this.actionService.onAdd\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(result => {\n                this.isAction = result;\n            });\n\n        if (this.data && this.data.hasOwnProperty('children')) {\n            this.expand = true;\n        } else {\n            this.expand = false;\n        }\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    onToggle() {\n        this.treeComponent.treeControl.toggle(this.data);\n        this.actionService.set(dataNode, this.data);\n        // console.log('this.toggle', this.toggleDirective);\n        if (this.data && this.data.hasOwnProperty('children')) {\n            this.expand = false;\n            this.collapse = true;\n        } else {\n            this.expand = false;\n            this.collapse = false;\n        }\n    }\n\n    onAdd(node: any = this.data) {\n        // send a signal to the parent directive and make the directive\n        // aware about type of action.\n        // internally update dataSource as well\n        const parentNode = this.nodeMap.get(node);\n        node.children.push({});\n        const tree: any = this.treeComponent.dataSource;\n        tree.push(node);\n        this.treeComponent.dataSource = [...tree];\n        console.log('tree', tree);\n        this.nestedTreeControl.expand(node);\n    }\n    onDestroy() {\n        console.log('on destroy');\n        this.actionService.onActChange(false);\n    }\n    onEdit() {\n        console.log('on edit');\n        this.actionService.onActChange(true);\n    }\n    /** Drag and drop, have ViewContainers and move the view from one ViewContainer to other */\n    drag(event: DragEvent) {\n        let currentViewContainerRef;\n        for (let i = 0; i < this.treeComponent.viewContainerRef.length; i++) {\n            for (let j = 0; j < this.treeComponent.viewContainerRef[i]._embeddedViews.length; j++) {\n                if (this.treeComponent.viewContainerRef[i]._embeddedViews[j].context === this.context) {\n                    currentViewContainerRef = this.treeComponent.viewContainerRef[i];\n                    break;\n                }\n            }\n        }\n\n        let currentViewRef;\n        for (let i = 0; i < this.treeComponent.cacheEmbeddedViewRef.length; i++) {\n            if (this.treeComponent.cacheEmbeddedViewRef[i].context === this.context) {\n                currentViewRef = this.treeComponent.cacheEmbeddedViewRef[i];\n                break;\n            }\n        }\n\n        event.dataTransfer.setData('nodeContext', JSON.stringify(this.context));\n\n        /** Sets the current view ref and view container ref in the cache. */\n        this.actionService.set(viewRefKey, currentViewRef);\n        this.actionService.set(viewRefContainer, currentViewContainerRef);\n\n    }\n}\n\n\n\n/** Directive */\n@Directive({\n    selector: '[slkContentAction]'\n})\nexport class SlkAddActionDirective {\n    /** Context for the template. */\n    private _context: SlkContentActionContext = new SlkContentActionContext();\n    /** Stores template ref condition is not true. */\n    private _elseTemplateRef: TemplateRef<SlkContentActionContext> | null = null;\n    /** Stores template ref condition is true. */\n    private _thenTemplateRef: TemplateRef<SlkContentActionContext> | null = null;\n    private _elseViewRef: EmbeddedViewRef<SlkContentActionContext> | null = null;\n    private _thenViewRef: EmbeddedViewRef<SlkContentActionContext> | null = null;\n    @Input()\n    set appContentAction(condition: any) {\n        this._context.$implicit = this._context.appContentAction = condition;\n        this._updateView();\n    }\n    @Input()\n    set appContentActionElse(templateRef: TemplateRef<SlkContentActionContext> | null) {\n        this._elseTemplateRef = templateRef;\n        this._elseViewRef = null;\n        this._updateView();\n    }\n    constructor(\n        public renderer: Renderer2,\n        public templateRef: TemplateRef<any>,\n        public viewContainer: ViewContainerRef\n    ) {\n        this._thenTemplateRef = templateRef;\n    }\n\n    _updateView() {\n        if (this._context.$implicit) {\n            if (!this._thenViewRef) {\n                this.viewContainer.clear();\n                this._elseViewRef = null;\n                if (this._thenTemplateRef) {\n                    this._thenViewRef = this.viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                }\n            }\n        } else {\n            if (!this._elseViewRef) {\n                this.viewContainer.clear();\n                this._thenViewRef = null;\n                if (this._elseTemplateRef) {\n                    this._elseViewRef =\n                        this.viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                    /** Tested to check remove method. */\n                    // const index = this.viewContainer.indexOf(this._elseViewRef);\n                    // this.viewContainer.remove(index);\n                }\n            }\n        }\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkTreeComponent } from './tree';\nimport { SlkTreeNodeDefDirective } from './node';\nimport { SlkNestedTreeNodeDirective } from './nested-node';\nimport { SlkTreeNodeOutletDirective } from './outlet';\nimport { SlkTreeTextOutletDirective } from './tree-nest-outlet';\nimport { SlkTreeNodeTextComponent, SlkAddActionDirective } from './tree-nest-node';\nimport { ActionsService } from './tree-service';\nimport { SlkTreeActionDirective } from './tree-nest-outlet';\nimport { SlkTreeNodeDirective } from './node-directive';\n\nconst EXPORTED_DECLARATIONS = [\n    SlkTreeComponent,\n    SlkTreeNodeDirective,\n    SlkTreeNodeDefDirective,\n    SlkNestedTreeNodeDirective,\n    SlkTreeNodeOutletDirective,\n    SlkTreeNodeTextComponent,\n    SlkTreeTextOutletDirective,\n    SlkTreeActionDirective,\n    SlkAddActionDirective\n];\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [\n        SlkTreeNodeDefDirective,\n        ActionsService\n    ]\n})\nexport class SlkTreeModule { }\n","import {\n    Directive,\n    ViewContainerRef,\n    TemplateRef,\n} from '@angular/core';\n\n@Directive({\n    selector: '[slkNavigator]'\n})\nexport class SlkNavDirective {\n    constructor(public viewContainer: ViewContainerRef) { }\n}\n\n@Directive({\n    selector: '[slkPageIndex]'\n})\nexport class SlkPageIndexDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild,\n    ContentChild,\n    TemplateRef,\n    AfterContentInit,\n    IterableDiffer,\n    IterableDiffers,\n    IterableChangeRecord,\n    EmbeddedViewRef,\n} from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { SlkNavDirective, SlkPageIndexDirective } from './page-nav';\nimport { ActionsService } from '../tree/tree-service';\nimport { takeUntil } from 'rxjs/operators';\n\n/** Reference code */\n// export const PAGINATOR_CHILD_TEMPLATE = `<ng-container appNavigator\n// *ngTemplateOutlet=\"pageBtnTemplate, context: {$implicit: ctx}\"></ng-container>`;\nexport const PAGINATOR_CHILD_TEMPLATE = `<ng-container slkNavigator></ng-container>`;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n    /** Current page index. */\n    pageIndex: number;\n    /** The current page size. */\n    pageSize: number;\n    /** The current total number of items being paged. */\n    length: number;\n}\n\nexport class PaginatorContext<T> {\n    $implicit: T;\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\nlet count = 0;\nlet actualCount = 0;\n\nexport const viewContainerRef = 'view-container-ref';\n\n/** TODO:- Put Comments After every line */\n@Component({\n    selector: 'slk-paginator-child',\n    template: PAGINATOR_CHILD_TEMPLATE,\n    styles: [`\n      .page-controller{background:#fff;border-radius:3px;width:27px;height:27px;cursor:pointer;margin-left:10px}\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class SlkPaginatorChildComponent implements OnInit, AfterContentInit {\n    /** Total pages. */\n    private _pages: any;\n    /** Watches for the change. */\n    private _dataDiffer: IterableDiffer<any>;\n\n    public viewRefCollection: EmbeddedViewRef<any>[] = [];\n    /** Gets the 'length' from parent component. */\n    @Input()\n    get length(): number { return this._length; }\n    set length(value: number) {\n        this._length = value;\n    }\n    private _length: number;\n\n    /** Gets the 'pageSize' from parent component. */\n    @Input()\n    get pageSize(): number { return this._pageSize; }\n    set pageSize(value: number) {\n        this._pageSize = value;\n    }\n    private _pageSize: number;\n\n    /** Queries 'SlkNavDirective' Gets the view container ref from 'SlkNavDirective'. */\n    @ViewChild(SlkNavDirective) nav: SlkNavDirective;\n\n    /** Queries whenever ContentChild changes. Read as TemplateRef. */\n    @ContentChild(SlkPageIndexDirective, { read: TemplateRef }) pageBtnTemplate: TemplateRef<any>;\n\n    constructor(\n        private _differs: IterableDiffers,\n        private cacheService: ActionsService\n    ) { }\n\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create();\n    }\n    ngAfterContentInit() {\n        this.renderIndex();\n    }\n\n    /** Inserts buttons as per total pages */\n    private renderIndex() {\n        // Get the count of pages to be displayed by the user.\n        count = Math.ceil(this.length / this.pageSize);\n        actualCount = count;\n        // Makes a array to iterate over the total pages needed. Should not be more than 5 buttons.\n        if (count > 5) {\n            count = 7;\n        } else {\n            count = count + 2;\n        }\n        // console.log('count', count);\n        const array = Array.from(Array(count).keys());\n        // Gets the context in a array and the template to be inserted.\n        this._pages = this._getAllIndexes(array);\n        // Captures the changes in dataDiffer.\n        const changes = this._dataDiffer.diff(this._pages);\n\n        changes.forEachOperation(\n            (record: IterableChangeRecord<any>, prevIndex: number, currenIndex: number) => {\n                if (record.previousIndex === null) {\n                    this.insertButtons(record.item);\n                }\n            }\n        );\n\n        this.cacheService.set(viewContainerRef, this.viewRefCollection);\n    }\n\n    private _getAllIndexes(indices: Array<any>): any[] {\n        return indices.map((_, i) => {\n            let pageNo: string, disabled: boolean;\n            switch (i) {\n                case 0:\n                    pageNo = '<';\n                    disabled = true;\n                    break;\n                case 1:\n                    pageNo = i.toString();\n                    disabled = true;\n                    break;\n                case indices.length - 1:\n                    pageNo = '>';\n                    disabled = false;\n                    break;\n                default:\n                    pageNo = i.toString();\n                    disabled = false;\n                    break;\n            }\n            return {\n                page: pageNo,\n                temp: this.pageBtnTemplate,\n                index: i,\n                disabled: disabled\n            };\n        });\n    }\n\n    private insertButtons(data: any) {\n        const ctxData = { page: data.page, index: data.index, disabled: data.disabled };\n        const context = new PaginatorContext<any>(ctxData);\n        const collectionViewRef = this.nav.viewContainer.createEmbeddedView(data.temp, context, data.index);\n        this.viewRefCollection.push(collectionViewRef);\n        // console.log('this.view', this.viewRefCollection);\n    }\n}\n\n@Component({\n    selector: 'slk-paginator',\n    template: `\n      <slk-paginator-child \n          [length]=\"_length\" \n          [pageSize]=\"_pageSize\">\n\n          <ng-container *slkPageIndex=\"let item\">\n\n              <button \n                  [disabled]=\"item.disabled\"\n                  class=\"page-controller\" \n                  (click)=\"onPaged(item.index, item.page)\">\n                  {{ item.page }}\n              </button>\n\n          </ng-container>\n\n      </slk-paginator-child>\n    `,\n    styles: [`\n      .page-controller{background:#fff;border-radius:3px;width:27px;height:27px;cursor:pointer;margin-left:10px}\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class SlkPaginatorComponent implements\n    OnInit,\n    OnDestroy {\n\n    public initialised: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Notifies when the component is destroyed. */\n    _onDestroy: Subject<boolean> = new Subject();\n\n    /** Gets the view ref collection. */\n    collectedViewRef: EmbeddedViewRef<any>[] = [];\n\n    /** Index of the page to be displayed. */\n    @Input()\n    get pageIndex(): number { return this._pageIndex; }\n    set pageIndex(value: number) {\n        this._pageIndex = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    private _pageIndex = 1;\n\n    /** Length of total number of items that are being paginated. */\n    @Input()\n    get length(): number { return this._length; }\n    set length(value: number) {\n        this._length = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    private _length = 0;\n\n    /** Number of items to be displayed on a page. Set a default value. */\n    @Input()\n    get pageSize(): number { return this._pageSize; }\n    set pageSize(value: number) {\n        this._pageSize = value;\n    }\n    private _pageSize: number;\n\n    /** The set of provided page size options to display to the user. */\n    @Input()\n    get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n    set pageSizeOptions(value: number[]) {\n        this._pageSizeOptions = (value || []).map(p => p);\n    }\n    private _pageSizeOptions: number[] = [];\n\n    /** Event emitted when page changes. */\n    @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n    /** Displayed set of page size options. */\n    _displayedPageSizeOptions: number[];\n\n    constructor(\n        public _changeDetectorRef: ChangeDetectorRef,\n        public cacheService: ActionsService\n    ) { }\n\n    ngOnInit() { this.initialised.next(true); }\n\n    ngOnDestroy() {\n        this.initialised.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    onPaged(index: number, page?: string) {\n        // Increment or decrement 'pageIndex' as the user clicks on the buttons.\n        if (index === 0) {\n            this.pageIndex--;\n        } else if (index === count - 1) {\n            this.pageIndex++;\n        } else {\n            this.pageIndex = index;\n        }\n        // console.log('index', index);\n        if (actualCount > count) {\n            if (index === count - 1) {\n                // Check if the pageIndex has reached the last button.\n                if (this.pageIndex >= 5) {\n                    // Now Change the context of currently available buttons\n                    this.incrementButtonContext();\n                    return;\n                }\n            }\n            if (index === 0) {\n                console.log(0);\n                // Now Change the context of currently available buttons.\n                this.decrementButtonContext(page);\n                return;\n            }\n            if (index === 1) {\n                console.log(1);\n                this.collectedViewRef[1].context.$implicit.disabled = true;\n                this._onPaged();\n                return;\n            }\n        }\n        /** Emits a event to update the data source. */\n        this._onPaged();\n        /** Changes contexts of button. */\n        this.changeContextOfButtons(this.pageIndex);\n    }\n    /** Changes the context on reaching last index. */\n    incrementButtonContext(): void {\n        // Increase the page number by 1 to display.\n\n        // Disable the right arrow if pageIndex has exceeded.\n        if (this.pageIndex >= actualCount) {\n            this.collectedViewRef[6].context.$implicit.disabled = true;\n        }\n        if (this.pageIndex === 5) {\n            this.collectedViewRef[5].context.$implicit.disabled = true;\n            this.collectedViewRef[4].context.$implicit.disabled = false;\n        }\n        // Not to be incremented if the last pageIndex is 5\n        if (this.pageIndex !== 5) {\n            for (let i = 0; i < this.collectedViewRef.length; i++) {\n                // Increase the number of page by 1.\n                if (i !== 0 && i !== 6) {\n                    this.collectedViewRef[i].context.$implicit.page =\n                        (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) + 1).toString();\n                    // Disable the currenlty selected pageIndex.\n                    if (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) === this.pageIndex) {\n                        this.collectedViewRef[i].context.$implicit.disabled = true;\n                    } else {\n                        this.collectedViewRef[i].context.$implicit.disabled = false;\n                    }\n                }\n            }\n        }\n\n        /** Emits a event to update the data source. */\n        this._onPaged();\n    }\n\n    /** Changes the context on reaching previous index. */\n    decrementButtonContext(page: string): void {\n        // console.log('pageIndex', page);\n        if (parseInt(page, 10) === 0) {\n            // console.log('disabled decrement');\n            this.collectedViewRef[0].context.$implicit.disabled = true;\n        }\n        for (let i = 0; i < this.collectedViewRef.length; i++) {\n            // Decrease the number of page by 1.\n            if (i !== 0 && i !== 6) {\n                this.collectedViewRef[i].context.$implicit.page =\n                    (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) - 1).toString();\n                // Disable the currently selected pageIndex.\n                if (parseInt(this.collectedViewRef[i].context.$implicit.page, 10) === this.pageIndex) {\n                    this.collectedViewRef[i].context.$implicit.disabled = true;\n                } else {\n                    this.collectedViewRef[i].context.$implicit.disabled = false;\n                }\n            }\n        }\n\n        /** Emits a event to update the data source. */\n        this._onPaged();\n    }\n\n    _onPaged(): void {\n        /** Emits a event to notify dataSource and update the page with right data. */\n        this.page.emit({\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n\n    /**\n     * Disables the page buttons as per selected index desired by the user.\n     */\n    changeContextOfButtons(pageInd: number): void {\n        // console.log('pageInd', pageInd);\n        this.cacheService.get(viewContainerRef)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((viewRef: EmbeddedViewRef<any>[]) => {\n\n                // Store the viewRef in a property to be used by this class.\n                this.collectedViewRef = viewRef;\n\n                // Check if the currently selected page index is less than 1 and disable start 2 index page buttons\n                // Check if the currently selected page index is equal or greater than the highest page index.\n                // Check if the currently selected page index is in the middle or none or above\n                if (pageInd === 5) {\n                    for (let i = 0; i < viewRef.length; i++) {\n                        if (i === 5) {\n                            viewRef[i].context.$implicit.disabled = true;\n                        } else {\n                            viewRef[i].context.$implicit.disabled = false;\n                        }\n                    }\n                }\n                if (pageInd !== 5) {\n                    if (pageInd > 1 && pageInd < viewRef.length - 2) {\n                        this.enableAll(viewRef, pageInd);\n                    } else if (pageInd >= viewRef.length - 2) {\n                        this.disableEndIndex(viewRef);\n                    } else {\n                        this.disableStartIndex(viewRef);\n                    }\n                }\n\n            });\n    }\n    /** Disables the button at the start indices. */\n    disableStartIndex(viewRef: EmbeddedViewRef<any>[]): void {\n        for (let i = 0; i < viewRef.length; i++) {\n            if (i < 2) {\n                viewRef[i].context.$implicit.disabled = true;\n            } else {\n                viewRef[i].context.$implicit.disabled = false;\n            }\n        }\n    }\n    /** Disables the button at the end indices. */\n    disableEndIndex(viewRef: EmbeddedViewRef<any>[]): void {\n        for (let i = 0; i < viewRef.length; i++) {\n            if (i >= viewRef.length - 2) {\n                viewRef[i].context.$implicit.disabled = true;\n            } else {\n                viewRef[i].context.$implicit.disabled = false;\n            }\n        }\n    }\n    /** Enables all the button. */\n    enableAll(viewRef: EmbeddedViewRef<any>[], pageInd: number): void {\n        for (let i = 0; i < viewRef.length; i++) {\n            if (viewRef[i].context.$implicit.index === pageInd) {\n                viewRef[i].context.$implicit.disabled = true;\n            } else {\n                viewRef[i].context.$implicit.disabled = false;\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkPaginatorChildComponent, SlkPaginatorComponent } from './paginator';\nimport { SlkNavDirective, SlkPageIndexDirective } from './page-nav';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [\n        SlkPaginatorComponent,\n        SlkPaginatorChildComponent,\n        SlkNavDirective,\n        SlkPageIndexDirective\n    ],\n    declarations: [\n        SlkPaginatorComponent,\n        SlkPaginatorChildComponent,\n        SlkNavDirective,\n        SlkPageIndexDirective\n    ]\n})\nexport class SlkPaginatorModule { }\n","import {\n    Directive,\n    OnInit,\n    OnDestroy,\n    Output,\n    EventEmitter,\n    Input,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Directive({\n    selector: '[slkFilter]',\n    exportAs: 'slkFilter'\n})\nexport class SlkGridFilterDirective implements OnInit, OnDestroy {\n    /** Collection of all registered filters that this directive manages. */\n    filterColumns = new Map<string, any>();\n    /** emit initialised value when directive is initialised. */\n    initialised = new BehaviorSubject<boolean>(false);\n\n    public selectedOptions: any[] = [];\n    public key: string | number;\n    /** The id of the most recently filtered column. */\n    @Input('slkFilterActive') active: string | number;\n\n    /** Event emitted when user types a keyword. */\n    @Output('slkFilterChange') readonly slkFilterChange: EventEmitter<any> = new EventEmitter();\n\n    constructor() { }\n\n    /** Gets the word and the active column for filtering. */\n    public filter(selectedOptions: any[], columnId: string | number, key?: any): void {\n        if (key) {\n            this.key = key;\n        }\n        this.selectedOptions = selectedOptions;\n        this.active = columnId;\n        this.slkFilterChange.emit({ data: selectedOptions });\n    }\n    ngOnInit() {\n        this.initialised.next(true);\n    }\n    ngOnDestroy() {\n        this.initialised.complete();\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    OnInit,\n    OnDestroy,\n    Inject\n} from '@angular/core';\nimport { OPTIONS_DIALOG_DATA } from '../grid-filter';\nimport { ActionsService } from '../tree';\n\nexport const selectedOptions = 'selected-options';\n\n@Component({\n    selector: 'slk-filter-popup',\n    template: `\n      <div class=\"dropdown\">\n\n          <div class=\"dropdown-button\">\n              Please Select\n          </div>\n\n          <ul class=\"dropdown-selection\">\n\n              <!-- later create these tags dynamically -->\n\n              <li class=\"container\" *ngFor=\"let d of data;let i = index;\">\n\n                  <div class=\"checkmark\">\n                      <span>{{ d.name }}</span>\n                  </div>\n\n                  <div class=\"checkbox\">\n                      <input type=\"checkbox\" [checked]=\"d.checked\" [value]=\"i\" (input)=\"onInputChange($event.target.value)\">\n                  </div>\n\n              </li>\n\n          </ul>\n\n      </div>\n    `,\n    styles: [`\n      .dropdown{display:inline-block;position:relative;font-size:16px;font-family:Arial}.dropdown-button{background:#3498db;min-width:100px;color:#fff;letter-spacing:.025rem;box-sizing:border-box;padding:10px 30px 10px 20px;position:relative;cursor:pointer;transition:background .3s ease}.dropdown-button:hover{background:#2980b9;transition:background .3s ease}.dropdown ul{direction:ltr;padding:0;list-style:none;box-shadow:0 2px 6px 0 rgba(0,0,0,.2);position:absolute;left:0;margin-top:2px;top:100%;min-width:100%;max-height:250px;overflow:auto}.dropdown li{background:#fff;padding:8px 10px 8px 15px;box-sizing:border-box;cursor:pointer;transition:background .2s ease;overflow:hidden}.dropdown li:hover{background:#f6f6f6;transition:background .2s ease}.checkmark{float:left;height:3vh}.checkbox{float:right;width:20%;height:3vh}.container{position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.container .checkbox input{position:absolute;cursor:pointer}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class SlkGridPopupComponent<T> implements\n    OnInit,\n    OnDestroy {\n    // protected _onDestroy: Subject<any> = new Subject();\n\n    protected collectedVal: T[] = [];\n\n    constructor(\n        @Inject(OPTIONS_DIALOG_DATA) public data: any[],\n        protected cacheService: ActionsService\n    ) {\n        this.data.unshift({ name: 'Select All', checked: false });\n    }\n\n    ngOnInit() {\n    }\n    ngOnDestroy() {\n        // this._onDestroy.next();\n        // this._onDestroy.complete();\n    }\n\n    onInputChange(value: any) {\n        // Select all\n        if (parseInt(value, 10) === 0) {\n            const updatedData = this.data.map((obj: any) => {\n                if (this.data[0].checked) {\n                    return {\n                        ...obj,\n                        checked: false\n                    }\n                } else {\n                    return {\n                        ...obj,\n                        checked: true\n                    }\n                }\n            });\n            this.data = updatedData;\n            const cachedData = updatedData.map((obj: any) => {\n                return obj.name;\n            });\n            this.cacheService.set(selectedOptions, cachedData);\n        } else {\n            this.collectedVal.push(this.data[value].name);\n            // Cache the selected values.\n            this.cacheService.set(selectedOptions, this.collectedVal);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkGridPopupComponent } from './grid-popup';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [SlkGridPopupComponent],\n    declarations: [SlkGridPopupComponent],\n})\nexport class SlkGridPopupModule { }\n","import { OverlayRef } from '@angular/cdk/overlay';\n\nexport class SlkGridFilterRef {\n    constructor(private overlayRef: OverlayRef) { }\n\n    close(): void {\n        this.overlayRef.dispose();\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const OPTIONS_DIALOG_DATA =\n    new InjectionToken<any>('OPTIONS_DIALOG_DATA');\n","import {\n    Injectable,\n    ComponentRef,\n    Injector,\n    ElementRef,\n} from '@angular/core';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    OriginConnectionPosition,\n    OverlayConnectionPosition\n} from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { SlkGridPopupComponent } from '../grid-popup';\nimport { SlkGridFilterRef } from './grid-filter-ref';\nimport { OPTIONS_DIALOG_DATA } from './grid-filter-tokens';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n// Each property can be overriden by the consumer\ninterface OptionsDialogConfig {\n    panelClass?: string;\n    hasBackdrop?: boolean;\n    backdropClass?: string;\n    data?: any[];\n}\n\nconst DEFAULT_CONFIG: OptionsDialogConfig = {\n    hasBackdrop: true,\n    backdropClass: 'no-style-backdrop',\n    panelClass: 'slk-options-dialog-panel',\n    data: []\n};\n\n@Injectable()\nexport class DomService {\n    onClose: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    // onCloseBehavior = observableOf(this.onClose);\n    onCloseBehavior: Observable<any> = this.onClose.asObservable();\n\n    constructor(\n        private injector: Injector,\n        private overlay: Overlay\n    ) { }\n\n    open(elementRef: ElementRef, config: any = {}) {\n        // Over ride default configuration\n        const dialogConfig = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        // Returns an OverlayRef (which is a PortalHost)\n        const overlayRef = this.createOverlay(dialogConfig, elementRef);\n        // Instantiate remote control\n        const dialogRef = new SlkGridFilterRef(overlayRef);\n\n        const overlayComponent = this.attachDialogContainer(overlayRef, dialogConfig, dialogRef);\n\n        overlayRef.backdropClick().subscribe(_ => {\n            this.onClose.next(true);\n            dialogRef.close();\n        });\n\n        return dialogRef;\n    }\n\n    private createOverlay(config: OptionsDialogConfig, elementRef: ElementRef) {\n        const overlayConfig = this.getOverlayConfig(config, elementRef);\n        return this.overlay.create(overlayConfig);\n    }\n\n    private attachDialogContainer(overlayRef: OverlayRef, config: OptionsDialogConfig, dialogRef: SlkGridFilterRef) {\n        const injector = this.createInjector(config, dialogRef);\n        const containerPortal = new ComponentPortal(SlkGridPopupComponent, null, injector);\n        const containerRef: ComponentRef<SlkGridPopupComponent<any>> = overlayRef.attach(containerPortal);\n        return containerRef.instance;\n    }\n\n    private createInjector(\n        config: OptionsDialogConfig,\n        dialogRef: SlkGridFilterRef): PortalInjector {\n        // Instantiate new WeakMap for our custom injection tokens\n        const injectionTokens = new WeakMap();\n\n        // Set customs injection tokens\n        injectionTokens.set(SlkGridFilterRef, dialogRef);\n        injectionTokens.set(OPTIONS_DIALOG_DATA, config.data);\n\n        // Instantiate new PortalInjector\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    private getOverlayConfig(config: OptionsDialogConfig, elementRef: ElementRef): OverlayConfig {\n        // const positionStrategy = this.overlay.position()\n        //     .global()\n        //     .centerHorizontally()\n        //     .centerVertically();\n        const positionStrategy = this._getPosition(elementRef);\n        // debugger;\n\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.backdropClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n        // debugger;\n\n        return overlayConfig;\n    }\n\n    _getPosition(elementRef: ElementRef): any {\n        const origin = {\n            topLeft: { originX: 'start', originY: 'top' } as OriginConnectionPosition,\n            topRight: { originX: 'end', originY: 'top' } as OriginConnectionPosition,\n            bottomLeft: { originX: 'start', originY: 'bottom' } as OriginConnectionPosition,\n            bottomRight: { originX: 'end', originY: 'bottom' } as OriginConnectionPosition,\n            topCenter: { originX: 'center', originY: 'top' } as OriginConnectionPosition,\n            bottomCenter: { originX: 'center', originY: 'bottom' } as OriginConnectionPosition,\n        };\n        const overlay = {\n            topLeft: { overlayX: 'start', overlayY: 'top' } as OverlayConnectionPosition,\n            topRight: { overlayX: 'end', overlayY: 'top' } as OverlayConnectionPosition,\n            bottomLeft: { overlayX: 'start', overlayY: 'bottom' } as OverlayConnectionPosition,\n            bottomRight: { overlayX: 'end', overlayY: 'bottom' } as OverlayConnectionPosition,\n            topCenter: { overlayX: 'center', overlayY: 'top' } as OverlayConnectionPosition,\n            bottomCenter: { overlayX: 'center', overlayY: 'bottom' } as OverlayConnectionPosition,\n        };\n\n        return this.overlay.position()\n            .connectedTo(elementRef, origin.bottomLeft, overlay.topLeft)\n            .withOffsetY(10)\n            .withDirection('rtl')\n            .withFallbackPosition(origin.bottomRight, overlay.topRight)\n            .withFallbackPosition(origin.topLeft, overlay.bottomLeft)\n            .withFallbackPosition(origin.topRight, overlay.bottomRight)\n            .withFallbackPosition(origin.topCenter, overlay.bottomCenter)\n            .withFallbackPosition(origin.bottomCenter, overlay.topCenter);\n    }\n}\n","import {\n    Component,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    OnInit,\n    OnDestroy,\n    HostListener,\n    Optional,\n    Input,\n    ViewContainerRef,\n    ElementRef,\n} from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { SlkGridFilterDirective } from './filter';\nimport { SlkColumnDefDirective, SlkTableComponent } from '../grid';\nimport { DomService } from './grid-filter-service';\nimport { SlkGridPopupComponent, selectedOptions } from '../grid-popup';\nimport { ActionsService } from '../tree/tree-service';\nimport { takeUntil } from 'rxjs/operators';\n\n\nexport const actualData = 'actual-data';\n/** The max height of the filter's overlay panel */\nexport const FILTER_PANEL_MAX_HEIGHT = 256;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const FILTER_PANEL_VIEWPORT_PADDING = 8;\n\n@Component({\n    selector: 'slk-filter-header',\n    template: `\n      <div class=\"triangle-down\"></div>\n    `,\n    styles: [`\n      .triangle-down{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:20px solid #555;float:right}\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SlkGridFilterComponent<T>\n    implements\n    OnInit,\n    OnDestroy {\n    /** When this component is initialised. */\n    public initialised: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    /** Destroy. */\n    public _onDestroy: Subject<any> = new Subject();\n    public _popup: SlkGridPopupComponent<T>;\n\n    private initialData: any[];\n\n    /** Gets the metadata if provided by the user.\n     * Has to Follow a format,\n     * TODO:- Get the format final\n     */\n\n    @Input('metadata') public metadata: any[];\n    public key: string | number;\n\n    /** ID of the filter-header. When used with slkColumndef, will default to column's name. */\n    @Input('slk-filter-header') id: string;\n    @HostListener('click')\n    onFilterChange(): void {\n        // Get the id of the selected filter and filter all unique values.\n        // Then pass the data to the popup component\n        let uniqueOptions;\n        if (!this.initialData) {\n            uniqueOptions = this._filterUniqueValues(this.id, this._grid.copyOfData);\n\n            this.initialData = this._grid.copyOfData.slice();\n            this.cacheService.set(actualData, this.initialData);\n            this.openPopup(uniqueOptions);\n            return;\n        } else {\n            this.cacheService.get(actualData)\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe((data: any[]) => {\n                    uniqueOptions = this._filterUniqueValues(this.id, data);\n                    this.openPopup(uniqueOptions);\n                    return;\n                });\n        }\n    }\n\n    constructor(\n        @Optional() public _filter: SlkGridFilterDirective,\n        @Optional() public _slkColumnDef: SlkColumnDefDirective,\n        public viewContainerRef: ViewContainerRef,\n        private _elementRef: ElementRef,\n        private domService: DomService,\n        private _grid: SlkTableComponent<any>,\n        protected cacheService: ActionsService\n    ) { }\n    ngOnInit() {\n        this.initialised.next(true);\n        // Sets the id for every column name\n        this.id = this._slkColumnDef.name;\n    }\n\n    ngOnDestroy() {\n        this.initialised.complete();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Opens the popup filter. */\n    private openPopup(uniqueOptions: any[]) {\n        // Opens a dialog and injects data in the entryComponent.\n        const overlayOptionsRef = this.domService.open(\n            this._elementRef,\n            { data: uniqueOptions }\n        );\n\n        // Subscribes to on close behavior\n        this._filterClose();\n    }\n\n    /** Subscribes to the on closed behavior. */\n    _filterClose() {\n        // When the filter popup is closed.\n        this.domService.onCloseBehavior\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((isClosed: any) => {\n                if (isClosed) {\n                    this._getSelectedValues();\n                }\n            });\n    }\n\n    /** Gets the selected values in the unique filter drop down. */\n    _getSelectedValues() {\n        this.cacheService.get(selectedOptions)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((selectedValues: any[]) => {\n                // Send the selected values to filter data in the grid.\n                this._filter.filter(selectedValues, this.id, this.key);\n            });\n    }\n\n    /**  Filters the unique values in the column. */\n    _filterUniqueValues(columnId: string, data: T[]): T[] {\n        // Stores the unique filters value in an array.\n        const uniqueValuesInTheColumn: any[] = [];\n        let uniqueValues: any[] = [];\n        let options: any[] = [];\n\n        if (this.metadata) {\n            for (let i = 0; i < this.metadata.length; i++) {\n                if (this.metadata[i].name === this.id) {\n                    // has to be id or a specific format supported\n                    this.key = this.metadata[i].reference_id;\n                    break;\n                }\n            }\n            for (let i = 0; i < data.length; i++) {\n                uniqueValuesInTheColumn.push(data[i][this.key]);\n            }\n            // remove duplicates\n            uniqueValues = this._removeDuplicates(uniqueValuesInTheColumn);\n            options = this._options(uniqueValues);\n            return options;\n\n        } else {\n\n            for (let i = 0; i < data.length; i++) {\n                uniqueValuesInTheColumn.push(data[i][columnId]);\n            }\n            uniqueValues = this._removeDuplicates(uniqueValuesInTheColumn);\n            options = this._options(uniqueValues);\n            return options;\n        }\n\n\n    }\n    /** Removes duplicates. */\n    _removeDuplicates(uniqueValuesInTheColumn: any[]): any[] {\n        return uniqueValuesInTheColumn.filter((element, pos) => {\n            return uniqueValuesInTheColumn.indexOf(element) === pos;\n        });\n    }\n\n    _options(uniqueValues: any[]) {\n        return uniqueValues.map((eachEl: any, index: number) => {\n            return {\n                name: eachEl,\n                checked: false\n            };\n        });\n    }\n\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlkGridFilterComponent } from './grid-filter';\nimport { SlkGridFilterDirective } from './filter';\nimport { DomService } from './grid-filter-service';\nimport { SlkGridPopupComponent } from '../grid-popup';\nimport { SlkGridPopupModule } from '../grid-popup';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        SlkGridPopupModule,\n        OverlayModule\n    ],\n    exports: [SlkGridFilterComponent, SlkGridFilterDirective],\n    declarations: [SlkGridFilterComponent, SlkGridFilterDirective],\n    entryComponents: [\n        // Needs to be added here because otherwise we can't\n        // dynamically render this component at runtime\n        SlkGridPopupComponent\n    ],\n    providers: [DomService]\n})\nexport class SlkFilterModule { }\n"],"names":["observableOf","DataSource","methods.quickSort","methods._finalDataSet","methods.shellSortAsc","methods.shellSortDesc","EXPORTED_DECLARATIONS"],"mappings":"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"}